{"version":3,"file":"vue3-components.js","sources":["../../../src/i18n/I18nComposable.ts"],"sourcesContent":["import { Cookie } from \"@nimiq/utils\";\nimport { ref } from \"vue\";\n\nexport type I18n$tVariables = { [key: string]: string | number };\n\nexport enum I18N_EVENTS {\n    LANGUAGE_READY = 'language-ready',\n}\n\nconst I18N_DEFAULT_LANGUAGE = 'en';\nconst I18N_SUPPORTED_LANGUAGES = [\n    I18N_DEFAULT_LANGUAGE,\n    'de', 'es', 'fr', 'nl', 'ru', 'uk', 'zh',\n];\n\n/** Current active language */\nconst i18nLang = ref<string>(detectLanguage());\nconst loadedMessages: { [lang: string]: { [key: string]: string } } = {};\nconst registeredComponents: string[] = [];\n\n/**\n * Set the language to use. This will lazy-load the translation files and rerender the ui once ready.\n * @param {string} lang - The language to use.\n */\nexport function setLanguage(lang: string) {\n    // If the language is not supported set it to the default one\n    if (!I18N_SUPPORTED_LANGUAGES.includes(lang)) {\n        lang = I18N_DEFAULT_LANGUAGE;\n    }\n    if (lang === i18nLang.value) return;\n\n    i18nLang.value = lang;\n    for (const componentName of Object.keys(registeredComponents)) {\n        loadComponentLanguageFile(componentName);\n    }\n}\n\n/**\n * Detect the language to use. If no language is set fallback to the browser language.\n * @returns {string} The language code\n */\nexport function detectLanguage(): string {\n    const langCookie = Cookie.getCookie('lang');\n    // const fallbackLang = window.navigator.language.split('-')[0];\n    const fallbackLang = 'en'; // TODO just temporarily, until language switching is enabled in wallet\n\n    let lang = langCookie || fallbackLang;\n    // If the language is not supported set it to the default one\n    if (!I18N_SUPPORTED_LANGUAGES.includes(lang)) {\n        lang = I18N_DEFAULT_LANGUAGE;\n    }\n    return lang;\n}\n\n/**\n * Asynchronously load a translation file.\n * @param {string} componentName - Name of the component you want to load a translation for\n */\nasync function loadComponentLanguageFile(componentName: string) {\n    const componentLang = i18nLang.value + '-' + componentName;\n\n    if (!(componentLang in loadedMessages) && i18nLang.value !== 'en') {\n        // Lazy-load translations. For English we don't load a language file but use the translation keys directly.\n        // Note that the request is cached and not repeated for parallel calls.\n        const messages = await import(\n            // tslint:disable-next-line: trailing-comma\n            /* webpackChunkName: \"lang-[request]\" */ `./${i18nLang}/${componentName}.json`\n        );\n\n        loadedMessages[componentLang] = messages.default || {};\n    }\n}\n\n/**\n * Get the translation of a given string for a component.\n * @param {string} componentName - Name of the component you want the translation for\n * @param {string} key - The string you want the translation for\n * @param {I18n$tVariables} [variables] - Variables to be replaced in the translated string. Optional.\n * @returns {string} The translated string.\n */\nexport function $t(componentName: string, key: string, variables?: I18n$tVariables): string;\n/**\n * Get the translation of a given string for a component.\n * @param {string} componentName - Name of the component you want the translation for\n * @param {string} key - The string you want the translation for\n * @param {string} lang - Language to use. The language has to be already loaded.\n * @param {I18n$tVariables} [variables] - Variables to be replaced in the translated string. Optional.\n * @returns {string} The translated string.\n */\nexport function $t(componentName: string, key: string, lang: string, variables?: I18n$tVariables): string;\nexport function $t(\n    componentName: string,\n    key: string,\n    variablesOrLang?: I18n$tVariables | string,\n    variables?: I18n$tVariables,\n): string {\n    let lang;\n    if (typeof variablesOrLang === 'string') {\n        lang = variablesOrLang;\n    } else {\n        lang = i18nLang.value;\n        variables = variablesOrLang;\n    }\n    const componentLang = `${lang}-${componentName}`;\n\n    let message = loadedMessages[componentLang]\n        ? loadedMessages[componentLang][key] || key\n        : key;\n\n    if (typeof variables === 'object' || Array.isArray(variables)) {\n        message = message.replace(/{(\\w+?)}/g, (match, variable) => variables![variable].toString() || match);\n    }\n\n    return message;\n}\n\nexport function loadI18n(componentName: string)\n    : (key: string, variablesOrLang?: I18n$tVariables | string, variables?: I18n$tVariables) => string {\n    loadComponentLanguageFile(componentName);\n\n    // @ts-ignore\n    return $t.bind(undefined, componentName);\n}\n\n// Update the language in case it was changed via language cookie.\nwindow.addEventListener('focus', () => setLanguage(detectLanguage()));\n"],"names":["I18N_DEFAULT_LANGUAGE","I18N_SUPPORTED_LANGUAGES","i18nLang","ref","detectLanguage","loadedMessages","registeredComponents","setLanguage","lang","componentName","loadComponentLanguageFile","Cookie","componentLang","messages","__variableDynamicImportRuntimeHelper","$t","key","variablesOrLang","variables","message","match","variable","loadI18n"],"mappings":";;;AASA,MAAMA,IAAwB,MACxBC,IAA2B;AAAA,EAC7BD;AAAA,EACA;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AACxC,GAGME,IAAWC,EAAYC,EAAA,CAAgB,GACvCC,IAAgE,CAAA,GAChEC,IAAiC,CAAA;AAMhC,SAASC,EAAYC,GAAc;AAKtC,MAHKP,EAAyB,SAASO,CAAI,MAChCA,IAAAR,IAEPQ,MAASN,EAAS,OAEtB;AAAA,IAAAA,EAAS,QAAQM;AACjB,eAAWC,KAAiB,OAAO,KAAKH,CAAoB;AACxD,MAAAI,EAA0BD,CAAa;AAAA;AAE/C;AAMO,SAASL,IAAyB;AAKrC,MAAII,IAJeG,EAAO,UAAU,MAAM,KAErB;AAIrB,SAAKV,EAAyB,SAASO,CAAI,MAChCA,IAAAR,IAEJQ;AACX;AAMA,eAAeE,EAA0BD,GAAuB;AACtD,QAAAG,IAAgBV,EAAS,QAAQ,MAAMO;AAE7C,MAAI,EAAEG,KAAiBP,MAAmBH,EAAS,UAAU,MAAM;AAG/D,UAAMW,IAAW,MAAMC,EAAA,uBAAA,OAAA,CAAA,CAAA,GAAA,KAAAZ,KAAAO,QAAA;AAKR,IAAAJ,EAAAO,KAAiBC,EAAS,WAAW,CAAA;AAAA,EACxD;AACJ;AAmBO,SAASE,EACZN,GACAO,GACAC,GACAC,GACM;AACF,MAAAV;AACA,EAAA,OAAOS,KAAoB,WACpBT,IAAAS,KAEPT,IAAON,EAAS,OACJgB,IAAAD;AAEV,QAAAL,IAAgB,GAAGJ,KAAQC;AAEjC,MAAIU,IAAUd,EAAeO,MACvBP,EAAeO,GAAeI,MAAQA;AAG5C,UAAI,OAAOE,KAAc,YAAY,MAAM,QAAQA,CAAS,OAC9CC,IAAAA,EAAQ,QAAQ,aAAa,CAACC,GAAOC,MAAaH,EAAWG,GAAU,SAAS,KAAKD,CAAK,IAGjGD;AACX;AAEO,SAASG,EAASb,GAC8E;AACnG,SAAAC,EAA0BD,CAAa,GAGhCM,EAAG,KAAK,QAAWN,CAAa;AAC3C;AAGA,OAAO,iBAAiB,SAAS,MAAMF,EAAYH,EAAgB,CAAA,CAAC;"}