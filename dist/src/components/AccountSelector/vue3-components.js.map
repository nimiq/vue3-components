{"version":3,"file":"vue3-components.js","sources":["../../../../src/components/AccountSelector/AccountSelector.vue"],"sourcesContent":["<template>\n    <div class=\"account-selector\">\n        <div ref=\"container$\" class=\"container\" :class=\"{'extra-spacing': wallets.length === 1}\">\n            <div v-for=\"wallet in sortedWallets\" :key=\"wallet.id\">\n                <div v-if=\"wallets.length > 1 || isAccountDisabled(wallet)\" class=\"wallet-label\">\n                    <div class=\"nq-label\">\n                        {{ wallet.label }}\n                        <span v-if=\"highlightBitcoinAccounts && wallet.btcXPub\" class=\"btc-pill\">BTC</span>\n                    </div>\n                    <!-- tooltip$ should be of type 'ComponentPublicInstance' imported from â€˜vue', but types cannot be passed to template -->\n                    <Tooltip\n                        v-if=\"isAccountDisabled(wallet)\"\n                        :ref=\"(tooltip$: any) => tooltips$[`tooltip-${wallet.id}`] = tooltip$\"\n                        :margin=\"tooltipProps.margin\"\n                        :container=\"tooltipProps.container || undefined\"\n                        :preferredPosition=\"tooltipProps.preferredPosition\"\n                        :styles=\"{ width: '25.25rem', ...tooltipProps.styles }\"\n                    >\n                        {{ $t(\n                            '{type} accounts cannot be used for this operation.',\n                            { type: getAccountTypeName(wallet)},\n                        ) }}\n                    </Tooltip>\n                </div>\n                <AccountList\n                    :accounts=\"sortAccountsAndContracts(listAccountsAndContracts(wallet), minBalance, disableContracts, disabledAddresses)\"\n                    :disabledAddresses=\"disabledAddresses\"\n                    :walletId=\"wallet.id\"\n                    :minBalance=\"minBalance\"\n                    :decimals=\"decimals\"\n                    :disableContracts=\"disableContracts\"\n                    :disabled=\"isAccountDisabled(wallet)\"\n                    :tooltipProps=\"tooltipProps\"\n                    @account-selected=\"onAccountSelected\"\n                    @click=\"accountClicked(wallet)\"\n                />\n            </div>\n        </div>\n\n        <div class=\"footer\">\n            <button v-if=\"allowLogin\" class=\"nq-button-s\" @click=\"onLogin\">{{ $t('Login to another account') }}</button>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, onBeforeUpdate, ref } from 'vue';\nimport AccountList from '../AccountList/AccountList.vue';\nimport Tooltip from '../Tooltip/Tooltip.vue';\nimport { loadI18n } from '../../i18n/I18nComposable';\n\n// This is a reduced list of properties, for convenience\nexport interface ContractInfo {\n    label: string;\n    userFriendlyAddress: string;\n    balance?: number;\n    walletId?: string;\n}\n\nexport interface AccountInfo {\n    path: string;\n    label: string;\n    // address: Nimiq.Address; // Nimiq namespace is not known and not used by @nimiq/vue-components\n    userFriendlyAddress: string;\n    balance?: number;\n    walletId?: string;\n}\n\nexport interface WalletInfo {\n    id: string;\n    label: string;\n    accounts: Map<string, AccountInfo>;\n    contracts: ContractInfo[];\n    type: number;\n    keyMissing: boolean;\n    btcXPub?: string;\n}\n\nexport enum AccountSelectorEvent {\n    ACCOUNT_SELECTED = 'account-selected',\n    LOGIN = 'login',\n}\n\nexport default defineComponent({\n    name: 'AccountSelector',\n    emits: Object.values(AccountSelectorEvent),\n    components: { AccountList, Tooltip },\n    props: {\n        wallets: {\n            type: Array as () => WalletInfo[],\n            required: true,\n        },\n        disabledAddresses: {\n            type: Array as () => string[],\n            default: () => [],\n        },\n        allowLogin: {\n            type: Boolean,\n            default: true,\n        },\n        decimals: Number,\n        minBalance: Number,\n        disableContracts: {\n            type: Boolean,\n            default: false,\n        },\n        disableLegacyAccounts: {\n            type: Boolean,\n            default: false,\n        },\n        disableBip39Accounts: {\n            type: Boolean,\n            default: false,\n        },\n        disableLedgerAccounts: {\n            type: Boolean,\n            default: false,\n        },\n        highlightBitcoinAccounts: {\n            type: Boolean,\n            default: false,\n        },\n    },\n    methods: { $t: loadI18n('AccountSelector') },\n    setup: (props, context) => {\n        const container$ = ref<HTMLElement | null>(null);\n        const tooltips$ = ref<Record<string, (typeof Tooltip)>>({});\n\n        onBeforeUpdate(() => tooltips$.value = {});\n\n        const shownTooltip = ref<typeof Tooltip | null>(null);\n        const hideTooltipTimeout = ref(-1);\n        const tooltipProps = ref({\n            get container() { return container$.value } ,\n            preferredPosition: 'bottom right',\n            margin: {\n                left: 16,\n                right: 16,\n                top: 32, // avoid that tooltips get affected by mask image\n                bottom: 32,\n            },\n            styles: {\n                pointerEvents: 'none',\n            },\n        });\n\n        const sortedWallets = computed<WalletInfo[]>(() => {\n            return props.wallets.slice(0).sort((a: WalletInfo, b: WalletInfo): number => {\n                const aDisabled = isAccountDisabled(a);\n                const bDisabled = isAccountDisabled(b);\n\n                if (aDisabled && !bDisabled) return 1;\n                if (!aDisabled && bDisabled) return -1;\n\n                if (!props.minBalance) return 0; // don't sort by balance if no minBalance required\n\n                const hasAddressWithSufficientBalance = (accounts: Map<string, AccountInfo>, contracts: ContractInfo[]) =>\n                    Array.from(accounts.values()).some((account) => (account.balance || 0) >= (props.minBalance || 0))\n                        || (!props.disableContracts && contracts.some((contract) => (contract.balance || 0) >= (props.minBalance || 0)));\n\n                const aHasAddressWithSufficientBalance = hasAddressWithSufficientBalance(a.accounts, a.contracts);\n                const bHasAddressWithSufficientBalance = hasAddressWithSufficientBalance(b.accounts, b.contracts);\n\n                if (!aHasAddressWithSufficientBalance && bHasAddressWithSufficientBalance) return 1;\n                if (aHasAddressWithSufficientBalance && !bHasAddressWithSufficientBalance) return -1;\n\n                return 0;\n            });\n        });\n\n        function onAccountSelected(walletId: string, address: string) {\n            context.emit(AccountSelectorEvent.ACCOUNT_SELECTED, { walletId, address });\n        }\n\n        function onLogin() {\n            context.emit(AccountSelectorEvent.LOGIN);\n        }\n\n        function isAccountDisabled(account: WalletInfo): boolean {\n            return props.disableLegacyAccounts && account.type === 1 /* LEGACY */\n                || props.disableBip39Accounts && account.type === 2 /* BIP39 */\n                || props.disableLedgerAccounts && account.type === 3 /* LEDGER */;\n        }\n\n        function getAccountTypeName(account: WalletInfo): string {\n            switch (account.type) {\n                case 1: return loadI18n('AccountSelector')('Legacy');\n                case 2: return 'Keyguard';\n                case 3: return 'Ledger';\n                default: throw new Error(`Unknown account type ${account.type}`);\n            }\n        }\n\n        function accountClicked(account: WalletInfo) {\n            window.clearTimeout(hideTooltipTimeout.value);\n\n            const tooltip = tooltips$.value[`tooltip-${account.id}`]\n                ? tooltips$.value[`tooltip-${account.id}`][0]\n                : null;\n\n            if (shownTooltip.value && shownTooltip.value !== tooltip) {\n                shownTooltip.value.hide(/* force */ false);\n            }\n\n            if (tooltip) {\n                tooltip.show();\n                hideTooltipTimeout.value = window.setTimeout(() => {\n                    tooltip.hide(/* force */ false);\n                    shownTooltip.value = null;\n                }, 2000);\n            }\n\n            shownTooltip.value = tooltip;\n        }\n\n        function listAccountsAndContracts(wallet: WalletInfo): Array<AccountInfo|ContractInfo> {\n            return [ ...wallet.accounts.values(), ...wallet.contracts ];\n        }\n\n        function sortAccountsAndContracts(\n            accounts: Array<AccountInfo | ContractInfo>,\n            minBalance?: number,\n            disableContracts?: boolean,\n            disabledAddresses?: string[],\n        ): Array<AccountInfo | ContractInfo> {\n            if (!minBalance) return accounts;\n\n            return accounts.sort((a: AccountInfo|ContractInfo, b: AccountInfo|ContractInfo): number => {\n                // sort disabled contracts to the end\n                const aIsDisabledContract = disableContracts && !('path' in a && a.path);\n                const bIsDisabledContract = disableContracts && !('path' in b && b.path);\n                if (aIsDisabledContract && !bIsDisabledContract) return 1;\n                if (!aIsDisabledContract && bIsDisabledContract) return -1;\n\n                // sort disabled addresses below other addresses\n                const aIsDisabledAddress = disabledAddresses && disabledAddresses.includes(a.userFriendlyAddress);\n                const bIsDisabledAddress = disabledAddresses && disabledAddresses.includes(b.userFriendlyAddress);\n                if (aIsDisabledAddress && !bIsDisabledAddress) return 1;\n                if (!aIsDisabledAddress && bIsDisabledAddress) return -1;\n\n                // sort accounts with insufficient funds below accounts with enough balance\n                if ((!a.balance || a.balance < minBalance) && b.balance && b.balance >= minBalance) return 1;\n                if ((!b.balance || b.balance < minBalance) && a.balance && a.balance >= minBalance) return -1;\n\n                return 0;\n            });\n        }\n\n        return {\n            container$,\n            tooltips$,\n            tooltipProps,\n            sortedWallets,\n            onAccountSelected,\n            onLogin,\n            listAccountsAndContracts,\n            sortAccountsAndContracts,\n            isAccountDisabled,\n            getAccountTypeName,\n            accountClicked,\n        };\n    }\n})\n</script>\n\n<style scoped>\n    .account-selector {\n        overflow: auto;\n        display: flex;\n        flex-direction: column;\n        flex-grow: 1;\n        height: 400px;\n    }\n\n    .container {\n        overflow-y: auto;\n        padding-top: 0.5rem;\n        padding-bottom: 4rem;\n        flex-grow: 1;\n        mask-image: linear-gradient(0deg , rgba(255,255,255,0), rgba(255,255,255, 1) 4rem,\n            rgba(255,255,255,1) calc(100% - 4rem), rgba(255,255,255,0));\n    }\n\n    .container.extra-spacing {\n        padding-top: 3rem;\n    }\n\n    .wallet-label {\n        margin: 3.5rem 2rem 2rem 3rem;\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n    }\n\n    .wallet-label .nq-label {\n        margin: 0;\n    }\n\n    .wallet-label .tooltip {\n        margin-left: 1rem;\n    }\n\n    .wallet-label::after {\n        content: '';\n        display: block;\n        flex-grow: 1;\n        height: 1px;\n        margin-left: 2rem;\n        background: rgba(31, 35, 72, 0.1);\n    }\n\n    .btc-pill {\n        background: #F7931A; /* Bitcoin orange */\n        color: white;\n        font-weight: bold;\n        font-size: 1.5rem;\n        padding: 0.25rem 0.75rem;\n        border-radius: 2rem;\n        margin-left: 0.25rem;\n    }\n\n    .footer {\n        padding: 4rem 0 3rem;\n        margin-top: -4rem;\n        text-align: center;\n    }\n\n    .nq-button-s {\n        margin: auto;\n        pointer-events: all;\n    }\n</style>\n"],"names":["_hoisted_2","_hoisted_4","_resolveComponent","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_normalizeClass","_ctx","_Fragment","_renderList","wallet","_hoisted_3","_createTextVNode","_toDisplayString","_createCommentVNode","tooltip$","_createVNode","_component_AccountList","_hoisted_5"],"mappings":";;;;;yCAI4EA,IAAM;AAAA,EAAA,KAAA;AAAA;8BAGFC,IAAgB;AAAA,EAAA,KAAA;AAAA;;;8BAN5FC,EAyCM,aAAA;AAxCM,SAAAC,EAAa,GAAAC,EAAA,OAAAC,GAAA;AAAA,IAAAC,EAAM,OAAC;AAAA,MAAA,KAAA;AAAA,MACxB,OAAAC,EAAA,CAAA,aAAA,EAAA,iBAiCMC,EAjCgB,QAAA,WAAA,EAAA,CAAA,CAAA;AAAA,IAAA,GAAA;AAAA,OAAqBL,EAAA,EAAO,GAAEC,EAAAK,GAAA,MAAAC,EAAAF,EAAA,eAAA,CAAAG;QACrC,KAAAA,EAAA;AAAA,MAAA,GAAA;AAAA,UACP,QAGM,SAAA,KAAAH,EAHN,kBAGMG,CAAA,KAAAR,EAAA,GAAAC,EAAA,OAFCJ,GAAe;AAAA,UAAAM,EACN,OAA4BM,GAAA;AAAA,YAAAC,EAAAC,EAAxCH,EAAmF,KAAnF,IAAA,KAAA,CAAA;AAAA,YAAAH,EAAA,4BAAAG,EAAA,WAAAR,EAAA,GAAAC,EAAA,QAAAH,GAAA,KAAA,KAIMc,EAAkB,IAAM,EAAA;AAAA,UAAA,CAAA;AAAA;YAC7B,KAAG;AAAA,YACH,SAAQ;AAAA,YACR,KAAA,CAAAC,MAAWR,EAAa,UAAA,WAAaG,EAAS,QAAAK;AAAA,YAC9C,QAAmBR,EAAA,aAAA;AAAA,YACnB,WAAMA,EAA0B,aAAA,aAAA;AAAA,YAAA,mBAAAA,EAAA,aAAA;AAAA,YAK7B,QAAA,EAAA,OAAA,YAAA,GAAAA,EAAA,aAAA,OAAA;AAAA,UAAA,GAAA;AAAA;gBAHyHM,EAAmBN,EAAA;AAAA,gBAAA;AAAA;;;;;QAMxJ,CAAA,KACKO,EAAU,IAAA,EAAA;AAAA,QAAAE,EACVC,GAAmB;AAAA,UACnB,UAAUV,EAAS,yBAAAA,EAAA,yBAAAG,CAAA,GAAAH,EAAA,YAAAA,EAAA,kBAAAA,EAAA,iBAAA;AAAA,UACnB,mBAAYA,EAAA;AAAA,UACZ,UAAUG,EAAA;AAAA,UACV,YAAgBH,EAAA;AAAA,UAChB,UAAUA,EAAA;AAAA,UACV,kBAAcA,EAAA;AAAA,UACd,UAAkBA,EAAA,kBAAAG,CAAA;AAAA,UAClB,cAAKH,EAAA;AAAA,UAAA,mBAAAA,EAAA;AAAA;;SAKlB,GAAA,GAAA;AAAA,IACkB,GAAA,CAAA;AAAA,IAAdF,EAAA,OAAAa,GAAA;AAAA,MAAAX,EAAA,cAAAL,KAA6CC,EAAA,UAAA;AAAA,QAAE,KAAA;AAAA,QAAA,OAAA;AAAA;;;;;;"}