{"version":3,"file":"vue3-components2.js","sources":["../../../../src/components/FiatAmount/FiatAmount.vue"],"sourcesContent":["<template>\n    <span class=\"fiat-amount\">\n        {{ currencyString }}\n    </span>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue';\nimport { FormattableNumber, CurrencyInfo } from '@nimiq/utils';\n\nconst FIAT_AMOUNT_NUMBER_REGEX = /(-)?\\D*(\\d+)(\\.(\\d+))?/;\nconst FIAT_AMOUNT_DECIMAL_SEPARATOR_REGEX = /(\\d)\\D(\\d)/;\nconst FIAT_AMOUNT_CURRENCY_CODE_REGEX = /[A-Z]{3}\\s?/i;\nconst FIAT_AMOUNT_SYMBOL_TRAILING_ALPHA_REGEX = /[A-Z.]$/i;\n\nexport default defineComponent({\n    name: 'FiatAmount',\n    props: {\n        amount: {\n            type: Number,\n            required: true,\n        },\n        currency: {\n            type: String,\n            required: true,\n        },\n        maxRelativeDeviation: {\n            type: Number,\n            default: .1,\n        },\n        hideDecimals: {// If set takes precedence over maxRelativeDeviation.\n            type: Boolean,\n            default: false,\n        },\n        locale: String,\n    },\n    setup(props) {\n        const currencyString = computed(() => {\n            const positioningLocale = getPositioningLocale(props.currency);\n            // Only create CurrencyInfo for a specific locale if a locale was requested, otherwise use default behavior.\n            // Don't use positioningLocale as it's just a rough guess for a language typical for a country where the\n            // currency is used and might result in using a language that the user does not understand.\n            const currencyInfo = props.locale\n                ? new CurrencyInfo(props.currency, props.locale)\n                : new CurrencyInfo(props.currency);\n            const formattingOptions = {\n                style: 'currency',\n                currency: props.currency,\n                currencyDisplay: 'code', // will later be replaced by the optimized currency symbol provided by CurrencyInfo\n                useGrouping: false,\n                numberingSystem: 'latn',\n                // start with decimal count typical for this.currency, e.g. 2 for eur, unless hideDecimals was requested\n                minimumFractionDigits: props.hideDecimals ? 0 : currencyInfo.decimals,\n                maximumFractionDigits: props.hideDecimals ? 0 : currencyInfo.decimals,\n            };\n            let formatted: string;\n            let integers: string;\n            let relativeDeviation: number;\n\n            do {\n                formatted = props.amount.toLocaleString([\n                    props.locale || positioningLocale,\n                    positioningLocale,\n                    `${navigator.language.substring(0, 2)}-${positioningLocale}`,\n                    navigator.language,\n                    `en-${positioningLocale}`,\n                    'en',\n                ], formattingOptions)\n                    // Enforce a dot as decimal separator for consistency and parseFloat. Using capturing groups instead of\n                    // lookahead/lookbehind to avoid browser support limitations.\n                    .replace(FIAT_AMOUNT_DECIMAL_SEPARATOR_REGEX, '$1.$2');\n                const regexMatch = formatted.match(FIAT_AMOUNT_NUMBER_REGEX)!;\n                const [/* full match */, sign, /* integers */, decimalsIncludingSeparator, decimals] = regexMatch;\n                integers = regexMatch[2];\n                const formattedNumber = `${sign || ''}${integers}${decimalsIncludingSeparator || ''}`;\n                relativeDeviation = Math.abs((props.amount - Number.parseFloat(formattedNumber)) / props.amount);\n\n                const nextDecimals = decimals ? decimals.length + 1 : 1;\n                formattingOptions.minimumFractionDigits = nextDecimals;\n                formattingOptions.maximumFractionDigits = nextDecimals;\n            } while (relativeDeviation > props.maxRelativeDeviation\n                && formattingOptions.minimumFractionDigits <= 20 // max for minimumFractionDigits and maximumFractionDigits\n                && !props.hideDecimals\n            );\n\n            // Replace the currency code with our custom currency symbol.\n            formatted = formatted.replace(FIAT_AMOUNT_CURRENCY_CODE_REGEX, (match, position) => {\n                if (position !== 0 || !FIAT_AMOUNT_SYMBOL_TRAILING_ALPHA_REGEX.test(currencyInfo.symbol)) {\n                    // For trailing currency symbol or currency symbol that does not end with a latin letter or dot do not\n                    // append a space, e.g.: 1.00 € (EUR), $1.00 (USD), R$1.00 (BRL), ₼1.00 (AZN), ৳1 (BDT), S/1.00 (PEN)\n                    return currencyInfo.symbol;\n                }\n                // For leading currency symbol that ends with a latin letter or dot, add a (non-breaking) space, e.g.\n                // KM 1.00 (BAM), B/. 1.00 (PAB), лв. 1.00 (BGN), kr 1.00 (DKK)\n                return `${currencyInfo.symbol}\\u00A0`;\n            });\n\n            // apply integer grouping\n            if (integers.length <= 4) return formatted;\n            return formatted.replace(integers, new FormattableNumber(integers).toString(true));\n        });\n\n        function getPositioningLocale(currency: string) {\n            // Try to guess a locale which positions the currency symbol in a way typical for countries, where the currency\n            // is used, e.g. 1.00€ for eur; $1.00 for usd.\n            currency = currency.toLowerCase();\n            switch (currency) {\n                case 'eur':\n                case 'chf':\n                    return 'de';\n                case 'gbp':\n                case 'usd':\n                    return 'en';\n                case 'cny':\n                    return 'zh';\n                default:\n                    // Return the country from the currency code which is typically (but not necessarily) the first two\n                    // letters (see https://en.wikipedia.org/wiki/ISO_4217#National_currencies), in the hope that it\n                    // coincides with a locale.\n                    // TODO oftentimes this results in the wrong locale, e.g. ARS (Argentinan Peso) -> AR (Arabic),\n                    //  CAD (Canadian Dollar) -> CA (Catalan). Can we come up with a better heuristic?\n                    return currency.substr(0, 2);\n            }\n        }\n\n        return { currencyString };\n    }\n})\n</script>\n"],"names":["FIAT_AMOUNT_NUMBER_REGEX","FIAT_AMOUNT_DECIMAL_SEPARATOR_REGEX","FIAT_AMOUNT_CURRENCY_CODE_REGEX","FIAT_AMOUNT_SYMBOL_TRAILING_ALPHA_REGEX","_sfc_main","defineComponent","props","currencyString","computed","positioningLocale","getPositioningLocale","currencyInfo","CurrencyInfo","formattingOptions","formatted","integers","relativeDeviation","regexMatch","sign","decimalsIncludingSeparator","decimals","formattedNumber","nextDecimals","match","position","FormattableNumber","currency"],"mappings":";;;AAUA,MAAMA,IAA2B,0BAC3BC,IAAsC,cACtCC,IAAkC,gBAClCC,IAA0C,YAEhDC,IAAeC,EAAgB;AAAA,EAC3B,MAAM;AAAA,EACN,OAAO;AAAA,IACH,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,UAAU;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,sBAAsB;AAAA,MAClB,MAAM;AAAA,MACN,SAAS;AAAA,IACb;AAAA,IACA,cAAc;AAAA,MACV,MAAM;AAAA,MACN,SAAS;AAAA,IACb;AAAA,IACA,QAAQ;AAAA,EACZ;AAAA,EACA,MAAMC,GAAO;AACH,UAAAC,IAAiBC,EAAS,MAAM;AAC5B,YAAAC,IAAoBC,EAAqBJ,EAAM,QAAQ,GAIvDK,IAAeL,EAAM,SACrB,IAAIM,EAAaN,EAAM,UAAUA,EAAM,MAAM,IAC7C,IAAIM,EAAaN,EAAM,QAAQ,GAC/BO,IAAoB;AAAA,QACtB,OAAO;AAAA,QACP,UAAUP,EAAM;AAAA,QAChB,iBAAiB;AAAA,QACjB,aAAa;AAAA,QACb,iBAAiB;AAAA,QAEjB,uBAAuBA,EAAM,eAAe,IAAIK,EAAa;AAAA,QAC7D,uBAAuBL,EAAM,eAAe,IAAIK,EAAa;AAAA,MAAA;AAE7D,UAAAG,GACAC,GACAC;AAED,SAAA;AACa,QAAAF,IAAAR,EAAM,OAAO,eAAe;AAAA,UACpCA,EAAM,UAAUG;AAAA,UAChBA;AAAA,UACA,GAAG,UAAU,SAAS,UAAU,GAAG,CAAC,KAAKA;AAAA,UACzC,UAAU;AAAA,UACV,MAAMA;AAAA,UACN;AAAA,QACD,GAAAI,CAAiB,EAGf,QAAQZ,GAAqC,OAAO;AACnD,cAAAgB,IAAaH,EAAU,MAAMd,CAAwB,GACrD,CAAmB,EAAAkB,GAAsB,EAAAC,GAA4BC,CAAQ,IAAIH;AACvF,QAAAF,IAAWE,EAAW;AACtB,cAAMI,IAAkB,GAAGH,KAAQ,KAAKH,IAAWI,KAA8B;AAC7D,QAAAH,IAAA,KAAK,KAAKV,EAAM,SAAS,OAAO,WAAWe,CAAe,KAAKf,EAAM,MAAM;AAE/F,cAAMgB,IAAeF,IAAWA,EAAS,SAAS,IAAI;AACtD,QAAAP,EAAkB,wBAAwBS,GAC1CT,EAAkB,wBAAwBS;AAAA,MAAA,SACrCN,IAAoBV,EAAM,wBAC5BO,EAAkB,yBAAyB,MAC3C,CAACP,EAAM;AAgBd,aAZAQ,IAAYA,EAAU,QAAQZ,GAAiC,CAACqB,GAAOC,MAC/DA,MAAa,KAAK,CAACrB,EAAwC,KAAKQ,EAAa,MAAM,IAG5EA,EAAa,SAIjB,GAAGA,EAAa,YAC1B,GAGGI,EAAS,UAAU,IAAUD,IAC1BA,EAAU,QAAQC,GAAU,IAAIU,EAAkBV,CAAQ,EAAE,SAAS,EAAI,CAAC;AAAA,IAAA,CACpF;AAED,aAASL,EAAqBgB,GAAkB;AAI5C,cADAA,IAAWA,EAAS,eACZA,GAAU;AAAA,QACd,KAAK;AAAA,QACL,KAAK;AACM,iBAAA;AAAA,QACX,KAAK;AAAA,QACL,KAAK;AACM,iBAAA;AAAA,QACX,KAAK;AACM,iBAAA;AAAA,QACX;AAMW,iBAAAA,EAAS,OAAO,GAAG,CAAC;AAAA,MACnC;AAAA,IACJ;AAEA,WAAO,EAAE,gBAAAnB,EAAe;AAAA,EAC5B;AACJ,CAAC;"}