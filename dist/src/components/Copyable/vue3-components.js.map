{"version":3,"file":"vue3-components.js","sources":["../../../../src/components/Copyable/Copyable.vue"],"sourcesContent":["<template>\n    <div class=\"copyable\" :class=\"{ copied }\" @click=\"copy\" tabindex=\"0\" ref=\"root$\">\n        <div class=\"background\"></div>\n        <slot></slot>\n        <div class=\"tooltip\" ref=\"tooltip$\">{{ $t('Copied') }}</div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, onBeforeUnmount, onMounted, ref } from 'vue';\nimport { Clipboard } from '@nimiq/utils';\nimport { loadI18n } from '../../i18n/I18nComposable';\n\n/**\n * **Copyable**\n *\n * Copyable can be used to make a click on one or more elements copy content to the Clipboard with visual feedback.\n * By default the children's contents are copied to the Clipboard. Alternatively, a specific text to be copied can be\n * provided.\n *\n * Props:\n *\n * **text** {string} [optional] - A specific text to be copied to the clipboard on click\n */\n\nexport const COPYABLE_DISPLAY_TIME = 800;\n\nexport default defineComponent({\n    name: 'Copyable',\n    props: {\n        text: String,\n    },\n    methods: { $t: loadI18n('Copyable') },\n    setup(props, context) {\n        const root$ = ref<HTMLDivElement | null>(null);\n        const tooltip$ = ref<HTMLDivElement | null>(null);\n\n        const copied = ref(false);\n        const copiedResetTimeout = ref<number | null>(null);\n\n        function copy() {\n            let text = props.text;\n\n            if (!text && root$.value && tooltip$.value) {\n                const copiedLabel = tooltip$.value.textContent;\n                text = root$.value.innerText.replace(new RegExp(`\\\\s*${copiedLabel}$`), '');\n            }\n            if (text) Clipboard.copy(text);\n\n            window.clearTimeout(copiedResetTimeout.value!);\n            copied.value = true;\n            copiedResetTimeout.value = window.setTimeout(() => {\n                copied.value = false;\n            }, COPYABLE_DISPLAY_TIME);\n        }\n\n        function onKeyDown(event: KeyboardEvent) {\n            if (event.key === ' ' /* Space */ || event.key === 'Enter') {\n                copy();\n            }\n        }\n\n        onMounted(() => root$.value!.addEventListener('keydown', onKeyDown));\n        onBeforeUnmount(() => root$.value!.removeEventListener('keydown', onKeyDown));\n\n        return {\n            root$,\n            tooltip$,\n\n            copied,\n            copy,\n        };\n    }\n})\n</script>\n\n<style scoped>\n    .copyable {\n        position: relative;\n        padding: 1.5rem;\n        cursor: pointer;\n        transition: color .3s var(--nimiq-ease);\n    }\n\n    .copyable:hover,\n    .copyable:focus,\n    .copyable.copied {\n        color: var(--nimiq-light-blue) !important;\n        outline: none;\n    }\n\n    .background {\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        background-image: var(--nimiq-light-blue-bg);\n        border-radius: .5rem;\n        opacity: 0;\n        transition: opacity .3s var(--nimiq-ease);\n    }\n\n    .copyable:hover .background,\n    .copyable:focus .background,\n    .copyable.copied .background {\n        opacity: .07;\n    }\n\n    .tooltip {\n        pointer-events: none;\n        font-size: 1.75rem;\n        padding: 0.75rem 1rem;\n        background: var(--nimiq-light-blue-bg);\n        position: absolute;\n        top: -5rem;\n        left: 50%;\n        margin-left: -3.75rem; /* half width of tooltip */\n        border-radius: .5rem;\n        color: white;\n        font-weight: 600;\n        line-height: 1.1;\n        box-shadow:\n            0px 2px 2.5px rgba(31, 35, 72, 0.02),\n            0px 7px 8.5px rgba(31, 35, 72, 0.04),\n            0px 18px 38px rgba(31, 35, 72, 0.07);\n\n        /* Animated styles */\n        transform: translate3d(0, 1rem, 0);\n        opacity: 0;\n\n        transition: transform .3s var(--nimiq-ease), opacity .3s var(--nimiq-ease);\n        transition-delay: .2s;\n    }\n\n    .tooltip::after {\n        content: '';\n        display: block;\n        position: absolute;\n        width: 2.25rem;\n        height: 2rem;\n        left: calc(50% - 1.125rem);\n        mask-image: url('data:image/svg+xml,<svg viewBox=\"0 0 18 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9 7.12c-.47 0-.93.2-1.23.64L3.2 14.29A4 4 0 0 1 0 16h18a4 4 0 0 1-3.2-1.7l-4.57-6.54c-.3-.43-.76-.64-1.23-.64z\" fill=\"white\"/></svg>');\n        z-index: 1000; /* move above tooltip-box's box-shadow */\n        background: #1A6AD2;\n        transform: rotate(180deg) translateY(-0.75rem);\n    }\n\n    .copyable.copied .tooltip {\n        transition-delay: 0s;\n        pointer-events: all;\n        opacity: 1;\n        transform: translate3d(0, 0, 0);\n    }\n</style>\n"],"names":["_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createElementBlock","_normalizeClass","args","_hoisted_1","_renderSlot","_createElementVNode"],"mappings":";;;;;;SACcA,EAACC,GAAAC,GAAAC,GAAUC,GAAWC,GAAMC,GAAA;SAAKC,EAAK,GAAAC,EAAA,OAAA;AAAA,IAAQ,OAAYC,EAAA,CAAA,YAAA,EAAA,QAAAR,EAAA,OAAA,CAAA,CAAA;AAAA,IAAC,SAAIC,EAAO,OAAAA,EAAA,KAAA,IAAAQ,MAAAT,EAAA,QAAAA,EAAA,KAAA,GAAAS,CAAA;AAAA,IAAA,UAAA;AAAA,IAC5E,KAAA;AAAA,EAAA,GACA;AAAA,IACAC;AAAA,IAAAC,EAAWX,EAAS,QAAA,WAAA,CAAA,GAAA,QAAA,EAAA;AAAA,IAAeY,EAAA,OAAA;AAAA,MAAA,OAAA;AAAA;;;;;"}