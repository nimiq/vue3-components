{"version":3,"file":"vue3-components2.js","sources":["../../../../src/components/AmountInput/AmountInput.vue"],"sourcesContent":["<template>\n    <div class=\"amount-input\" :class=\"{ 'has-value': valueInLuna > 0, 'focussed': isFocussed }\">\n        <form class=\"label-input\" @submit.prevent=\"$emit(AmountInputEvent.SUBMIT, $event)\" ref=\"fullWidth$\">\n            <span class=\"width-finder width-placeholder\" ref=\"widthPlaceholder$\">{{ placeholder }}</span>\n            <div v-if=\"maxFontSize\" class=\"full-width\" :class=\"{ 'width-finder': maxWidth > 0 }\">Width</div>\n            <span class=\"width-finder width-value\" ref=\"widthValue$\">{{ formattedValue || '' }}</span>\n            <input type=\"text\" inputmode=\"decimal\" class=\"nq-input\"\n                ref=\"input$\"\n                :class=\"{ vanishing }\"\n                :placeholder=\"placeholder\"\n                :style=\"{ width: `${width}px`, fontSize: `${fontSize}rem` }\"\n                @focus=\"isFocussed = true\"\n                @blur=\"isFocussed = false\"\n                @paste=\"$emit(AmountInputEvent.PASTE, $event)\"\n                v-model=\"formattedValue\"\n            />\n        </form>\n        <span class=\"nim\">NIM</span>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, onMounted, ref, watch, nextTick } from 'vue';\n\nexport enum AmountInputEvent {\n    MODELVALUE_UPDATE = 'update:modelValue',\n    PASTE = 'paste',\n    SUBMIT = 'submit',\n}\n\nexport default defineComponent({\n    name: 'AmountInput',\n    emits: Object.values(AmountInputEvent),\n    props: {\n        modelValue: Number,\n        maxFontSize: {\n            type: Number,\n            default: 8,\n        },\n        placeholder: {\n            type: String,\n            default: '0',\n        },\n        vanishing: {\n            type: Boolean,\n            default: false,\n        },\n        decimals: {\n            type: Number,\n            default: 5,\n        },\n    },\n    setup(props, context) {\n        const fullWidth$ = ref<HTMLDivElement | null>(null);\n        const input$ = ref<HTMLInputElement | null>(null);\n        const widthPlaceholder$ = ref<HTMLSpanElement | null>(null);\n        const widthValue$ = ref<HTMLSpanElement | null>(null);\n\n        const liveValue = ref('');\n        const lastEmittedValue = ref(0);\n        const width = ref(50);\n        const fontSize = ref(props.maxFontSize);\n        const maxWidth = ref(0);\n        const valueInLuna = ref(0);\n        const isFocussed = ref(false);\n\n        onMounted(() => {\n            if (props.maxFontSize && fullWidth$.value) {\n                maxWidth.value = fullWidth$.value.offsetWidth;\n            }\n        });\n\n        function focus() {\n            if (input$.value) input$.value.focus();\n        }\n\n        function updateValue(newValue: number) {\n            if (newValue === valueInLuna.value) return;\n            lastEmittedValue.value = newValue || 0;\n            formattedValue.value = newValue ? (newValue / Math.pow(10, props.decimals)).toString() : '';\n            updateWidth();\n        }\n\n        async function updateWidth() {\n            await nextTick(); // Await updated DOM\n            if (!widthPlaceholder$.value || !widthValue$.value) return;\n\n            const placeholderWidth = widthPlaceholder$.value.offsetWidth;\n            const valueWidth = widthValue$.value.offsetWidth;\n            const fontSizeFactor = Math.min(1.0, Math.max(maxWidth.value / valueWidth, 1 / props.maxFontSize));\n\n            fontSize.value = fontSizeFactor * props.maxFontSize;\n            width.value = (formattedValue.value ? (fontSizeFactor === 1 ? valueWidth : maxWidth.value) : placeholderWidth);\n        }\n\n        const formattedValue = computed({\n            get() {\n                return liveValue.value;\n            },\n            set(value: string) {\n                liveValue.value = value;\n\n                if (!value) {\n                    liveValue.value = '';\n                    lastEmittedValue.value = 0;\n                    valueInLuna.value = 0;\n                    context.emit(AmountInputEvent.MODELVALUE_UPDATE, valueInLuna.value);\n                    return;\n                }\n\n                value = value.replace(/\\,/, '.');\n                const regExp = new RegExp(`(\\\\d*)(\\\\.(\\\\d{0,${props.decimals}}))?`, 'g'); // Backslashes are escaped\n                const regExpResult = regExp.exec(value)!;\n                if (regExpResult[1] || regExpResult[2]) {\n                    liveValue.value = `${regExpResult[1] ? regExpResult[1] : '0'}${regExpResult[2] ? regExpResult[2] : ''}`;\n                    valueInLuna.value = Number(\n                        `${regExpResult[1]}${(regExpResult[2] ? regExpResult[3] : '').padEnd(props.decimals, '0')}`,\n                    );\n                } else {\n                    liveValue.value = '';\n                    valueInLuna.value = 0;\n                }\n\n                if (lastEmittedValue.value !== valueInLuna.value) {\n                    context.emit(AmountInputEvent.MODELVALUE_UPDATE, valueInLuna.value);\n                    lastEmittedValue.value = valueInLuna.value;\n                }\n            }\n        });\n\n        watch(formattedValue, updateWidth);\n        watch(\n            () => props.modelValue,\n            (newValue: number | undefined) => newValue && updateValue(newValue),\n            { immediate: true }\n        );\n\n        context.expose({ focus, formattedValue });\n\n        return {\n            fullWidth$,\n            input$,\n            widthPlaceholder$,\n            widthValue$,\n\n            valueInLuna,\n            isFocussed,\n            maxWidth,\n            formattedValue,\n            width,\n            fontSize,\n\n            AmountInputEvent,\n        };\n    },\n});\n</script>\n\n<style scoped>\n    .label-input {\n        position: relative;\n        overflow: hidden; /* limit width-finder width to parent available width */\n        max-width: 100%;\n        height: 100%;\n    }\n\n    .width-finder {\n        position: absolute;\n        color: transparent;\n        pointer-events: none;\n        user-select: none;\n        white-space: pre;\n        padding: 1.25rem;\n    }\n\n    input {\n        padding: 0 0.25rem;\n        max-width: 100%;\n        text-align: center;\n        transition: width 50ms ease-out, color .2s var(--nimiq-ease);\n    }\n\n    .full-width {\n        width: 1000px;\n    }\n\n    .amount-input {\n        display: flex;\n        align-items: baseline;\n        justify-content: center;\n        width: 100%;\n        font-size: 8rem;\n        color: rgba(31, 35, 72, 0.5); /* Based on Nimiq Blue */\n        transition: color .2s var(--nimiq-ease);\n    }\n\n    .amount-input.has-value {\n        color: var(--nimiq-blue);\n    }\n\n    .amount-input.focussed {\n        color: var(--nimiq-light-blue);\n    }\n\n    .amount-input form {\n        display: flex;\n    }\n\n    .amount-input .nim {\n        margin-left: 1rem;\n        font-size: 4rem;\n        font-weight: 700;\n        line-height: 4.5rem;\n    }\n</style>\n"],"names":["AmountInputEvent","_sfc_main","defineComponent","props","context","fullWidth$","ref","input$","widthPlaceholder$","widthValue$","liveValue","lastEmittedValue","width","fontSize","maxWidth","valueInLuna","isFocussed","onMounted","focus","updateValue","newValue","formattedValue","updateWidth","nextTick","placeholderWidth","valueWidth","fontSizeFactor","computed","value","regExpResult","watch"],"mappings":"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"}