{"version":3,"file":"vue3-components.js","sources":["../../../../src/components/AmountInput/AmountInput.vue"],"sourcesContent":["<template>\n    <div class=\"amount-input\" :class=\"{ 'has-value': valueInLuna > 0, 'focussed': isFocussed }\">\n        <form class=\"label-input\" @submit.prevent=\"$emit(AmountInputEvent.SUBMIT, $event)\" ref=\"fullWidth$\">\n            <span class=\"width-finder width-placeholder\" ref=\"widthPlaceholder$\">{{ placeholder }}</span>\n            <div v-if=\"maxFontSize\" class=\"full-width\" :class=\"{ 'width-finder': maxWidth > 0 }\">Width</div>\n            <span class=\"width-finder width-value\" ref=\"widthValue$\">{{ formattedValue || '' }}</span>\n            <input type=\"text\" inputmode=\"decimal\" class=\"nq-input\"\n                ref=\"input$\"\n                :class=\"{ vanishing }\"\n                :placeholder=\"placeholder\"\n                :style=\"{ width: `${width}px`, fontSize: `${fontSize}rem` }\"\n                @focus=\"isFocussed = true\"\n                @blur=\"isFocussed = false\"\n                @paste=\"$emit(AmountInputEvent.PASTE, $event)\"\n                v-model=\"formattedValue\"\n            />\n        </form>\n        <span class=\"nim\">NIM</span>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, onMounted, ref, watch, nextTick } from 'vue';\n\nexport enum AmountInputEvent {\n    MODELVALUE_UPDATE = 'update:modelValue',\n    PASTE = 'paste',\n    SUBMIT = 'submit',\n}\n\nexport default defineComponent({\n    name: 'AmountInput',\n    emits: Object.values(AmountInputEvent),\n    props: {\n        modelValue: Number,\n        maxFontSize: {\n            type: Number,\n            default: 8,\n        },\n        placeholder: {\n            type: String,\n            default: '0',\n        },\n        vanishing: {\n            type: Boolean,\n            default: false,\n        },\n        decimals: {\n            type: Number,\n            default: 5,\n        },\n    },\n    setup(props, context) {\n        const fullWidth$ = ref<HTMLDivElement | null>(null);\n        const input$ = ref<HTMLInputElement | null>(null);\n        const widthPlaceholder$ = ref<HTMLSpanElement | null>(null);\n        const widthValue$ = ref<HTMLSpanElement | null>(null);\n\n        const liveValue = ref('');\n        const lastEmittedValue = ref(0);\n        const width = ref(50);\n        const fontSize = ref(props.maxFontSize);\n        const maxWidth = ref(0);\n        const valueInLuna = ref(0);\n        const isFocussed = ref(false);\n\n        onMounted(() => {\n            if (props.maxFontSize && fullWidth$.value) {\n                maxWidth.value = fullWidth$.value.offsetWidth;\n            }\n        });\n\n        function focus() {\n            if (input$.value) input$.value.focus();\n        }\n\n        function updateValue(newValue: number) {\n            if (newValue === valueInLuna.value) return;\n            lastEmittedValue.value = newValue || 0;\n            formattedValue.value = newValue ? (newValue / Math.pow(10, props.decimals)).toString() : '';\n            updateWidth();\n        }\n\n        async function updateWidth() {\n            await nextTick(); // Await updated DOM\n            if (!widthPlaceholder$.value || !widthValue$.value) return;\n\n            const placeholderWidth = widthPlaceholder$.value.offsetWidth;\n            const valueWidth = widthValue$.value.offsetWidth;\n            const fontSizeFactor = Math.min(1.0, Math.max(maxWidth.value / valueWidth, 1 / props.maxFontSize));\n\n            fontSize.value = fontSizeFactor * props.maxFontSize;\n            width.value = (formattedValue.value ? (fontSizeFactor === 1 ? valueWidth : maxWidth.value) : placeholderWidth);\n        }\n\n        const formattedValue = computed({\n            get() {\n                return liveValue.value;\n            },\n            set(value: string) {\n                liveValue.value = value;\n\n                if (!value) {\n                    liveValue.value = '';\n                    lastEmittedValue.value = 0;\n                    valueInLuna.value = 0;\n                    context.emit(AmountInputEvent.MODELVALUE_UPDATE, valueInLuna.value);\n                    return;\n                }\n\n                value = value.replace(/\\,/, '.');\n                const regExp = new RegExp(`(\\\\d*)(\\\\.(\\\\d{0,${props.decimals}}))?`, 'g'); // Backslashes are escaped\n                const regExpResult = regExp.exec(value)!;\n                if (regExpResult[1] || regExpResult[2]) {\n                    liveValue.value = `${regExpResult[1] ? regExpResult[1] : '0'}${regExpResult[2] ? regExpResult[2] : ''}`;\n                    valueInLuna.value = Number(\n                        `${regExpResult[1]}${(regExpResult[2] ? regExpResult[3] : '').padEnd(props.decimals, '0')}`,\n                    );\n                } else {\n                    liveValue.value = '';\n                    valueInLuna.value = 0;\n                }\n\n                if (lastEmittedValue.value !== valueInLuna.value) {\n                    context.emit(AmountInputEvent.MODELVALUE_UPDATE, valueInLuna.value);\n                    lastEmittedValue.value = valueInLuna.value;\n                }\n            }\n        });\n\n        watch(formattedValue, updateWidth);\n        watch(\n            () => props.modelValue,\n            (newValue: number | undefined) => newValue && updateValue(newValue),\n            { immediate: true }\n        );\n\n        context.expose({ focus, formattedValue });\n\n        return {\n            fullWidth$,\n            input$,\n            widthPlaceholder$,\n            widthValue$,\n\n            valueInLuna,\n            isFocussed,\n            maxWidth,\n            formattedValue,\n            width,\n            fontSize,\n\n            AmountInputEvent,\n        };\n    },\n});\n</script>\n\n<style scoped>\n    .label-input {\n        position: relative;\n        overflow: hidden; /* limit width-finder width to parent available width */\n        max-width: 100%;\n        height: 100%;\n    }\n\n    .width-finder {\n        position: absolute;\n        color: transparent;\n        pointer-events: none;\n        user-select: none;\n        white-space: pre;\n        padding: 1.25rem;\n    }\n\n    input {\n        padding: 0 0.25rem;\n        max-width: 100%;\n        text-align: center;\n        transition: width 50ms ease-out, color .2s var(--nimiq-ease);\n    }\n\n    .full-width {\n        width: 1000px;\n    }\n\n    .amount-input {\n        display: flex;\n        align-items: baseline;\n        justify-content: center;\n        width: 100%;\n        font-size: 8rem;\n        color: rgba(31, 35, 72, 0.5); /* Based on Nimiq Blue */\n        transition: color .2s var(--nimiq-ease);\n    }\n\n    .amount-input.has-value {\n        color: var(--nimiq-blue);\n    }\n\n    .amount-input.focussed {\n        color: var(--nimiq-light-blue);\n    }\n\n    .amount-input form {\n        display: flex;\n    }\n\n    .amount-input .nim {\n        margin-left: 1rem;\n        font-size: 4rem;\n        font-weight: 700;\n        line-height: 4.5rem;\n    }\n</style>\n"],"names":["_withScopeId","n","_pushScopeId","_popScopeId","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_normalizeClass","_createElementVNode","_withModifiers","$event","_toDisplayString","_openBlock","_createCommentVNode","_withDirectives","_normalizeStyle","_hoisted_1"],"mappings":";;;;;AAiBQ,MAAAA,IAAA,CAAAC,OAAAC,EAAA,iBAAA,GAAAD,IAAAA,KAAAE,KAAAF;AAhBM,SAAAG,EAAAC,GAAAC,GAACC,GAAcC,GAAwBC,GAAAC,GAAA;;IAC7C,OAcOC,EAAA,CAAA,gBAAA,EAAA,aAAAN,EAAA,cAAA,GAAA,UAAAA,EAAA,WAAA,CAAA,CAAA;AAAA,EAAA,GAAA;AAAA,IAd0BO,EAAA,QAAA;AAAA,MAAkD,OAAI;AAAA,MAAA,UAAAN,EAAA,OAAAA,EAAA,KAAAO,EAAA,CAAAC,MAAAT,EAAA,MAAAA,EAAA,iBAAA,QAAAS,CAAA,GAAA,CAAA,SAAA,CAAA;AAAA,MACnF,KAAA;AAAA,IAAA,GAAA;AAAA,QAAiD,QAAmB;AAAA,QAAA,OAAA;AAAA,QACzD,KAAA;AAAA,MAAA,GAAAC,EAAXV,EAAgG,WAAA,GAAA,GAAA;AAAA,MAAAA,EAAA,eAAAW,OAAlE,OAAY;AAAA,QAA2C,KAAA;AAAA,QAAA,OAAAL,EAAA,CAAA,cAAA,EAAA,gBAAAN,EAAA,WAAA,EAAA,CAAA,CAAA;AAAA,MACrF,GAAA,SAAA,CAAA,KAAMY,EAAM,IAAA,EAAA;AAAA,MAA4CL,EAAA,QAAA;AAAA,QAAA,OAAA;AAAA;SACjDG,EAAWV,EAAA,kBAAA,EAAA,GAAA,GAAA;AAAA,MAAAa,EAAWN,EAAS,SAAA;AAAA,QAAC,MAAK;AAAA,QACxC,WAAI;AAAA,QAEH,SAAa,CAAW,YAAA,EAAA,WAAAP,EAAA,UAAA,CAAA,CAAA;AAAA,QACxB,KAAK;AAAA,QACL,aAAKA,EAAA;AAAA,QACL,OAAIc,2BAAE,UAAU,GAAAd,EAAA,cAAA,CAAA;AAAA,QAChB,SAAKC,uBAAED,EAAM,aAAA;AAAA,QACL,QAAAC,EAAA,OAAAA,EAAA,KAAA,CAAAQ,MAAAT,EAAA,aAAA;AAAA,QAAA,SAAAC,EAAA,OAAAA,EAAA,KAAA,CAAAQ,MAAAT,EAAA,MAAAA,EAAA,iBAAA,OAAAS,CAAA;AAAA,+BAAAR,EAAc,OAAAA,EAAA,KAAA,CAAAQ,MAAAT,EAAA,iBAAAS;AAAA,MAAA,GAAA,MAAA,IAAAM,CAAA,GAAA;AAAA;MAG/B,CAAA;AAAA,IAAA,GAAA,GAAA;AAAA;;;;"}