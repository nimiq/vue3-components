{"version":3,"file":"vue3-components2.js","sources":["../../../../src/components/LongPressButton/LongPressButton.vue"],"sourcesContent":["<template>\n    <button class=\"long-press-button nq-button\" :class=\"color\"\n        @mousedown.left.prevent=\"isPressed = true; /* also prevent focus. mouseup is registered on document */\"\n        @touchstart.prevent=\"isPressed = true; /* also prevent context menu on long press */\"\n        @keydown.enter.space.prevent=\"isPressed = true; /* also prevent triggering clicks */\"\n        @touchend=\"isPressed = false\"\n        @keyup.enter.space=\"isPressed = false\"\n        @blur=\"isPressed = false /* if focus moves away, release the button */\"\n        @click.prevent.stop=\"$event.stopImmediatePropagation(); /* don't trigger handlers */\"\n        @submit.prevent.stop=\"$event.stopImmediatePropagation(); /* don't trigger handlers and default behavior */\"\n    >\n        <span class=\"mix-blend-mode-mask\">\n            <transition name=\"transition-indicator\">\n                <div v-if=\"isPressed\" class=\"indicator\" :style=\"`--transition-time: ${duration}ms`\"/>\n            </transition>\n            <!-- Do not show/hide label, prompt and subline via v-if and instead always keep them in the DOM to avoid\n            the button changing its size when switching between the texts. -->\n            <label :class=\"{show: !showKeepPressingPrompt, center: isPressed && $slots.subline}\"><slot/></label>\n            <label :class=\"{show: showKeepPressingPrompt, center: isPressed && $slots.subline}\">{{\n                $t('Keep pressing\\u2026')\n            }}</label>\n            <span v-if=\"$slots.subline\" class=\"subline\" :class=\"{show: !isPressed}\"><slot name=\"subline\"/></span>\n        </span>\n    </button>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, onMounted, onUnmounted, ref, watch } from 'vue';\nimport { loadI18n } from '../../i18n/I18nComposable';\n\nexport enum LongPressButtonEvent {\n    LONG_PRESS = 'long-press',\n}\n\nexport default defineComponent({\n    name: 'LongPressButton',\n    emits: Object.values(LongPressButtonEvent),\n    props: {\n        duration: {\n            type: Number,\n            default: 3000, // ms\n        },\n        color: {\n            type: String,\n            default: 'light-blue',\n        },\n    },\n    methods: { $t: loadI18n('LongPressButton') },\n    setup(props, context) {\n        const isPressed = ref(false);\n        const showKeepPressingPrompt = ref(false);\n\n        // Register mouseup on document instead of on the button to detect it even if the mouse moved away. For touchend\n        // and keyup, listening on the button suffices.\n        const onMouseup = () => isPressed.value = false;\n        onMounted(() => document.addEventListener('mouseup', onMouseup));\n        onUnmounted(() => document.removeEventListener('mouseup', onMouseup));\n\n        let keepPressingTimeout = -1;\n        let longPressTimeout = -1;\n        watch(isPressed, () => {\n            if (isPressed.value) {\n                keepPressingTimeout = window.setTimeout(() => showKeepPressingPrompt.value = true, props.duration * .4);\n                longPressTimeout = window.setTimeout(\n                    () => context.emit(LongPressButtonEvent.LONG_PRESS),\n                    props.duration,\n                );\n            } else {\n                clearTimeout(keepPressingTimeout);\n                clearTimeout(longPressTimeout);\n                showKeepPressingPrompt.value = false;\n            }\n        });\n\n        return {\n            isPressed,\n            showKeepPressingPrompt,\n        };\n    },\n});\n</script>\n\n<style scoped>\n    .long-press-button {\n        --label-height: 2.5rem; /* variable that can be overwritten if custom content has a different height */\n        --subline-height: 2.5rem; /* variable that can be overwritten if custom content has a different height */\n        --transition-time: 3s; /* default value; the actual effective value is set via duration prop */\n        --release-transiton-time: min(.3s, var(--transition-time)); /* short transition time when button released */\n\n        contain: layout style; /* not paint because focus outline overflows */\n        padding: 0; /* make the .mix-blend-mode-mask cover the whole button to be able to add paint containment on it */\n    }\n\n    .mix-blend-mode-mask {\n        contain: layout paint style;\n        display: flex;\n        height: 100%;\n        padding: 0 6.5rem;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        /* We achieve the color switching effect of the labels within the indicator area by two nested mix-blend-modes.\n        The indicator and labels combine to a black and white mask in the .mix-blend-mode-mask of which only the white\n        parts are rendered over the button via the lighten mix-blend-mode. Notably, the text within the indicator area\n        is mixed to black, such that the button color shines through the text. */\n        mix-blend-mode: lighten;\n    }\n\n    .indicator {\n        contain: layout paint style;\n        position: absolute;\n        width: calc(100% - 1.5rem);\n        max-height: calc(100% - 1.5rem);\n        border-radius: 999px; /* just needs to be at least the indicator height */\n        overflow: hidden;\n        background: white;\n        mix-blend-mode: difference; /* subtract text to make it black in the .mix-blend-mode-mask over the indicator */\n        transition: width var(--transition-time) ease-out;\n    }\n\n    .indicator.transition-indicator-enter-from,\n    .indicator.transition-indicator-leave-to {\n        width: 0;\n    }\n    .indicator.transition-indicator-leave-active {\n        transition-duration: var(--release-transiton-time);\n    }\n\n    /* css hack to ensure the indicator has the same height as width until max-height is reached */\n    .indicator::after {\n        contain: size layout paint style;\n        content: '';\n        display: block;\n        padding-top: 100%;\n    }\n\n    label,\n    .subline {\n        contain: style; /* not layout or paint because these would cause a new stacking context */\n        white-space: nowrap;\n        /* Transition color and margin instead of opacity and transform as those would create a new stacking context\n        (https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context)\n        which would prevent it from mixing with mix-blend-mode. */\n        transition-property: color, margin;\n        transition-timing-function: var(--nimiq-ease);\n    }\n\n    label:not(.show),\n    .subline:not(.show) {\n        color: rgba(255, 255, 255, 0);\n    }\n\n    label {\n        --center-offset: calc(var(--subline-height) / 2 - 1px); /* -1px because it looks just a bit better centered */\n        color: white;\n        transition-duration: var(--release-transiton-time); /* quick transition when button released */\n    }\n\n    label.center {\n        transition-duration: .5s, 1s; /* somewhat quick fade between labels and slow centering on button press */\n    }\n\n    label:nth-of-type(1).center {\n        margin-top: var(--center-offset); /* only need to do this for the first label, the second will move along */\n    }\n\n    label:nth-of-type(2) {\n        /* place second label on top of first for fading between then */\n        --extra-margin: calc((var(--label-height) - 2.5rem) / 2); /* split height difference to --label-height in 2 */\n        margin-top: calc(-1 * var(--label-height) + var(--extra-margin));\n        margin-bottom: var(--extra-margin);\n    }\n    label:nth-of-type(2).center {\n        /* pull subline up to keep it at the original position */\n        margin-bottom: calc(-1 * var(--center-offset) + var(--extra-margin));\n    }\n\n    .subline {\n        font-size: 1.75rem;\n        font-weight: 600;\n        letter-spacing: normal;\n        text-transform: none;\n        color: rgba(255, 255, 255, .7);\n        transition-duration: 1s;\n    }\n    .subline.show {\n        transition-duration: var(--release-transiton-time); /* quick transition when button released */\n    }\n</style>\n"],"names":["LongPressButtonEvent","_sfc_main","defineComponent","loadI18n","props","context","isPressed","ref","showKeepPressingPrompt","onMouseup","onMounted","onUnmounted","keepPressingTimeout","longPressTimeout","watch"],"mappings":";;AA8BY,IAAAA,sBAAAA,OACRA,EAAA,aAAa,cADLA,IAAAA,KAAA,CAAA,CAAA;AAIZ,MAAAC,IAAeC,EAAgB;AAAA,EAC3B,MAAM;AAAA,EACN,OAAO,OAAO,OAAOF,CAAoB;AAAA,EACzC,OAAO;AAAA,IACH,UAAU;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,IACb;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,SAAS;AAAA,IACb;AAAA,EACJ;AAAA,EACA,SAAS,EAAE,IAAIG,EAAS,iBAAiB,EAAE;AAAA,EAC3C,MAAMC,GAAOC,GAAS;AACZ,UAAAC,IAAYC,EAAI,EAAK,GACrBC,IAAyBD,EAAI,EAAK,GAIlCE,IAAY,MAAMH,EAAU,QAAQ;AAC1C,IAAAI,EAAU,MAAM,SAAS,iBAAiB,WAAWD,CAAS,CAAC,GAC/DE,EAAY,MAAM,SAAS,oBAAoB,WAAWF,CAAS,CAAC;AAEpE,QAAIG,IAAsB,IACtBC,IAAmB;AACvB,WAAAC,EAAMR,GAAW,MAAM;AACnB,MAAIA,EAAU,SACYM,IAAA,OAAO,WAAW,MAAMJ,EAAuB,QAAQ,IAAMJ,EAAM,WAAW,GAAE,GACtGS,IAAmB,OAAO;AAAA,QACtB,MAAMR,EAAQ,KAAK,YAA+B;AAAA,QAClDD,EAAM;AAAA,MAAA,MAGV,aAAaQ,CAAmB,GAChC,aAAaC,CAAgB,GAC7BL,EAAuB,QAAQ;AAAA,IACnC,CACH,GAEM;AAAA,MACH,WAAAF;AAAA,MACA,wBAAAE;AAAA,IAAA;AAAA,EAER;AACJ,CAAC;"}