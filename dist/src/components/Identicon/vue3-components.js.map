{"version":3,"file":"vue3-components.js","sources":["../../../../src/components/Identicon/Identicon.vue"],"sourcesContent":["<template>\n    <div class=\"identicon\">\n        <img :src=\"dataUrl\">\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, ref, watch } from 'vue';\nimport { ValidationUtils } from '@nimiq/utils';\n// @ts-expect-error Could not find a declaration file for module '@nimiq/identicons/dist/identicons.min.js'.\nimport Identicons from '@nimiq/identicons/dist/identicons.min.js';\n\nimport identiconRaw from '@nimiq/identicons/dist/identicons.min.svg?raw';\nIdenticons.svgPath = `data:text/plain;base64,${window.btoa(identiconRaw)}`;\n\nexport default defineComponent({\n    name: 'Identicon',\n    props: {\n        address: {\n            required: true,\n            type: String,\n        }\n    },\n    setup(props, context) {\n        function formatAddress(str: string) {\n            return str.replace(/[\\+ ]/g, '').toUpperCase().match(/.{4}/g)!.join(' ');\n        }\n\n        function isUserFriendlyAddress(str: string) {\n            return ValidationUtils.isValidAddress(str);\n        }\n\n        const placeholderDataUrl = computed(() => {\n            // tslint:disable-next-line max-line-length\n            return 'data:image/svg+xml,<svg width=\"64\" height=\"64\" viewBox=\"0 -4 64 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path opacity=\".1\" d=\"M62.3 25.4L49.2 2.6A5.3 5.3 0 0 0 44.6 0H18.4c-1.9 0-3.6 1-4.6 2.6L.7 25.4c-1 1.6-1 3.6 0 5.2l13.1 22.8c1 1.6 2.7 2.6 4.6 2.6h26.2c1.9 0 3.6-1 4.6-2.6l13-22.8c1-1.6 1-3.6.1-5.2z\" fill=\"url(%23identicon_radial)\"/><defs><radialGradient id=\"identicon_radial\" cx=\"0\" cy=\"0\" r=\"1\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(-63.0033 0 0 -56 63 56)\"><stop stop-color=\"%23260133\"/><stop offset=\"1\" stop-color=\"%231F2348\"/></radialGradient></defs></svg>';\n        });\n\n        const dataUrl = ref(placeholderDataUrl.value);\n\n        watch(() => props.address, computeDataUrl, { immediate: true })\n        async function computeDataUrl(address: string, oldAddress?: string) {\n            if (props.address && isUserFriendlyAddress(props.address)) {\n                // // Set svgPath\n                // Identicons.svgPath = (await import('@nimiq/identicons/dist/identicons.min.svg?url')).default;\n\n                dataUrl.value = await Identicons.toDataUrl(formatAddress(props.address));\n            } else {\n                dataUrl.value = placeholderDataUrl.value;\n            }\n            return true;\n        }\n\n        context.expose({\n            formatAddress,\n            isUserFriendlyAddress,\n        });\n\n        return { dataUrl };\n    }\n})\n</script>\n\n<style scoped>\n    .identicon {\n        width: 10rem;\n    }\n\n    img {\n        width: 100%;\n        height: 100%;\n    }\n</style>\n"],"names":["_sfc_render","_ctx","_cache","$props","$setup","$data","$options"],"mappings":";;;;;SAEQA,EAAoBC,GAAAC,GAAdC,GAAKC,GAAOC,GAAAC,GAAA;;;;;;"}