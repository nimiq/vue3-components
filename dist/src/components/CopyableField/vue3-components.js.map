{"version":3,"file":"vue3-components.js","sources":["../../../../src/components/CopyableField/CopyableField.vue"],"sourcesContent":["<template>\n    <div class=\"copyable-field\" :class=\"{ small }\">\n        <span class=\"nq-label\" v-if=\"label\">{{ label }}</span>\n        <div class=\"copyable-field-content\" :class=\"{ 'simple-value': !isKeyedValue, copied }\" @click=\"copy\">\n            <div ref=\"valueContainer$\" class=\"value-container\" :style=\"{ fontSize: fontSize+'rem' }\">\n                <span ref=\"value$\" class=\"value\">\n                    {{ typeof modelValue === 'object' ? modelValue[currentKey] : modelValue }}\n                </span>\n            </div>\n            <button\n                class=\"nq-button-s\"\n                v-for=\"key in (isKeyedValue ? Object.keys(modelValue) : [])\"\n                :key=\"key\"\n                @click.stop=\"currentKey = key\"\n                :class=\"{\n                    inverse: currentKey === key,\n                    'single-key': hasSingleKey,\n                }\"\n                :tabindex=\"hasSingleKey ? -1 : 0\"\n            >{{key}}</button>\n            <div class=\"copy-notice\">{{ $t('Copied') }}</div>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, nextTick, onMounted, onUnmounted, ref, watch } from 'vue';\nimport { Clipboard } from '@nimiq/utils';\nimport { loadI18n } from '../../i18n/I18nComposable';\n\nexport const COPYABLE_FIELD_DEFAULT_FONT_SIZE = 3; // in rem\nexport const COPYABLE_FIELD_DEFAULT_FONT_SIZE_SMALL = 2.5; // in rem\n\nexport default defineComponent({\n    name: 'CopyableField',\n    props: {\n        modelValue: {\n            type: Object as () => (string | number | { [key: string]: any }),\n            required: true,\n            validator: (value: string | object) => typeof value === 'string' || typeof value === 'number'\n                || (typeof value === 'object' && Object.keys(value).length > 0),\n        },\n        label: String,\n        small: {\n            type: Boolean,\n            default: false,\n        },\n    },\n    methods: { $t: loadI18n('CopyableField') },\n    setup(props) {\n        const value$ = ref<HTMLSpanElement | null>(null);\n        const valueContainer$ = ref<HTMLDivElement | null>(null);\n\n        const currentKey = ref('');\n        const fontSize = ref(props.small ? COPYABLE_FIELD_DEFAULT_FONT_SIZE_SMALL : COPYABLE_FIELD_DEFAULT_FONT_SIZE);\n        const copied = ref(false);\n        const copiedResetTimeout = ref<number | null>(null);\n\n        onMounted(() => {\n            // this.updateFontSize = this.updateFontSize.bind(this);\n            window.addEventListener('resize', updateFontSize);\n            updateFontSize();\n        });\n\n        onUnmounted(() => window.removeEventListener('resize', updateFontSize));\n\n        const isKeyedValue = computed(() => {\n            return typeof props.modelValue !== 'string' && typeof props.modelValue !== 'number';\n        });\n\n        const hasSingleKey = computed(() => {\n            return isKeyedValue.value && Object.keys(props.modelValue).length === 1;\n        });\n\n        watch(() => props.modelValue, onValueChange, { immediate: true });\n        function onValueChange() {\n            const keys = isKeyedValue.value ? Object.keys(props.modelValue) : [];\n            if (keys.length > 0 && (!currentKey.value || !keys.includes(currentKey.value))) {\n                currentKey.value = keys[0]; // will also trigger updateFontSize\n            } else {\n                updateFontSize(); // trigger manually\n            }\n        }\n\n        watch(currentKey, updateFontSize);\n        watch(() => props.small, updateFontSize);\n        async function updateFontSize() {\n            await nextTick(); // let Vue render the component first\n            if (!valueContainer$.value || !value$.value) return;\n\n            const defaultFontSize = props.small ? COPYABLE_FIELD_DEFAULT_FONT_SIZE_SMALL : COPYABLE_FIELD_DEFAULT_FONT_SIZE;\n            value$.value.style.fontSize = `${defaultFontSize}rem`;\n\n            const availableWidth = valueContainer$.value.offsetWidth;\n            const referenceWidth = value$.value.offsetWidth;\n            const scaleFactor =  availableWidth / referenceWidth;\n            value$.value.style.fontSize = '';\n            fontSize.value = Math.min(defaultFontSize, defaultFontSize * scaleFactor);\n        }\n\n        function copy() {\n            Clipboard.copy(\n                isKeyedValue.value\n                    ? (props.modelValue as { [key: string]: any })[currentKey.value].toString()\n                    : props.modelValue.toString()\n            );\n            copied.value = true;\n\n            if (copiedResetTimeout.value) window.clearTimeout(copiedResetTimeout.value);\n            copiedResetTimeout.value = window.setTimeout(() => {\n                copied.value = false;\n            }, 500);\n        }\n\n        return {\n            value$,\n            valueContainer$,\n\n            currentKey,\n            fontSize,\n            copied,\n\n            isKeyedValue,\n            hasSingleKey,\n            copy,\n        };\n    }\n})\n</script>\n\n<style scoped>\n    .copyable-field-content,\n    .copy-notice,\n    button,\n    .simple-value .value-container {\n        transition-duration: .25s;\n        transition-timing-function: var(--nimiq-ease);\n    }\n\n    .copyable-field,\n    .copyable-field-content {\n        display: flex;\n        width: 100%;\n        align-items: center;\n    }\n\n    .copyable-field {\n        flex-direction: column;\n        justify-content: space-between;\n        color: white;\n    }\n\n    .copyable-field-content {\n        height: 6.25rem;\n        position: relative;\n        border-radius: 0.5rem;\n        line-height: 6.25rem;\n        cursor: pointer;\n        background: rgba(255, 255, 255, 0.1);\n        transition-property: background;\n    }\n\n    .small .copyable-field-content {\n        height: 5rem;\n        line-height: 5rem;\n    }\n\n    .copy-notice {\n        position: absolute;\n        right: 0;\n        top: 50%;\n        transform: translateY(-50%);\n        font-size: 1.75rem;\n        font-weight: 600;\n        color: var(--nimiq-light-blue);\n        pointer-events: none;\n        opacity: 0;\n        transition-property: opacity;\n    }\n\n    .copyable-field-content,\n    .copy-notice {\n        padding: 0 3rem;\n    }\n\n    .copyable-field-content:hover {\n        background: rgba(255, 255, 255, 0.16);\n    }\n\n    .copied .copy-notice {\n        opacity: 1;\n    }\n\n    button {\n        margin-left: .5rem;\n        transition-property: background, color, opacity;\n    }\n\n    button:first-of-type {\n        margin-left: 2.5rem;\n    }\n\n    button:not(.inverse) {\n        background: transparent;\n    }\n\n    button:not(.inverse):hover {\n        background: rgba(255, 255, 255, .07);\n    }\n\n    button.inverse {\n        color: white;\n    }\n\n    button.single-key {\n        pointer-events: none;\n        background: transparent;\n    }\n\n    .small button {\n        height: 3rem;\n        line-height: 3rem;\n    }\n\n    .copied button {\n        opacity: 0;\n    }\n\n    .value-container {\n        display: flex;\n        align-items: center;\n        flex-grow: 1;\n        overflow-x: hidden; /* avoid overflow of the value while it's not resized yet */\n        white-space: nowrap;\n    }\n\n    .simple-value .value-container {\n        mask-image: linear-gradient(90deg, black 60%, transparent 80%);\n        mask-size: 160%;\n        transition-property: mask-size;\n    }\n\n    .simple-value.copied .value-container {\n        mask-size: 100%;\n    }\n\n    .nq-button-s,\n    .nq-label {\n        color: rgba(255, 255, 255, 0.5);\n    }\n\n    .nq-label {\n        margin-top: 3rem;\n        margin-bottom: 2rem;\n    }\n\n    .small .nq-label {\n        margin-top: 2.75rem;\n        margin-bottom: 1.75rem;\n    }\n</style>\n"],"names":["_hoisted_1","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_normalizeClass","_openBlock","_createElementBlock","_toDisplayString","_createCommentVNode","_createElementVNode","args","_normalizeStyle","_Fragment","_renderList","key","_withModifiers","$event","_hoisted_2"],"mappings":";;;;;MAEcA,IAAgB;AAAA,EAAA,KAAA;AAAA;;SADhBC,EAACC,GAAAC,GAAAC,GAAAC,GAAgBC,GAAWC,GAAK;;WACVC,EAAK,CAAA,kBAAA,EAAA,OAAAN,EAAA,MAAA,CAAA,CAAA;AAAA,EAAA,GAAA;AAAA,eAClCO,EAkBM,GAAAC,EAAA,QAAAV,GAAAW,EAAAT,EAAA,KAAA,GAAA,CAAA,KAlBDU,EAAK,IAAC,EAAA;AAAA,IAAkFC,EAAA,OAAA;AAAA,MAAA,OAAAL,EAAA,CAAA,0BAAA,EAAA,gBAAA,CAAAN,EAAA,cAAA,QAAAA,EAAA,OAAA,CAAA,CAAA;AAAA,MACzF,SAIMC,EAAA,OAAAA,EAAA,KAAA,IAAAW,MAAAZ,EAAA,QAAAA,EAAA,KAAA,GAAAY,CAAA;AAAA,IAAA,GAAA;AAAA,QAJ2B,OAAiB;AAAA,QAAE,KAAK;AAAA,QAAA,OAAA;AAAA,QACrD,OAEOC,EAAA,EAAA,UAAAb,EAAA,WAAA,OAAA;AAAA,MAAA,GAAA;AAAA,QAFyBW,EAAA,QAAA;AAAA,UAAA,KAAA;AAAA;QAIpC,GAAAF,EAAA,OAAAT,EAAA,cAUiB,WAREA,EAAA,WAAAA,EAAA,cAAqBA,EAAK,UAAC,GAAU,GAAA;AAAA,MAAA,GAAA,CAAA;AAAA,OAD/CO,EAAA,EAAA,GAAAC,EAACM,GAAa,MAAAC,EAAAf,EAAA,eAAA,OAAA,KAAAA,EAAA,UAAA,IAAA,CAAA,GAAA,CAAAgB,OAIoBT,EAAA,GAAAC,EAAe,UAAG;AAAA,QAAoC,OAAAF,EAAA,CAAA,eAAA;AAAA,UAAA,SAAAN,EAAA,eAAAgB;AAAA,UAFpF,cAAAhB,EAAA;AAAA,QAAA,CACH,CAAA;AAAA,QAKL,KAAAgB;AAAA,QACC,SAAAC,EAAA,CAAAC,MAAAlB,EAAA,aAAAgB,GAAA,CAAA,MAAA,CAAA;AAAA,QAAA,UAAAhB,EAAA,eAAA,KAAA;AAAA,MACN,GAAAS,EAAiDO,IAAjD,IAAiDG,CAAA,EAAA,GAAA,GAAA;AAAA;;;;;"}