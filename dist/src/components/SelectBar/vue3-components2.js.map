{"version":3,"file":"vue3-components2.js","sources":["../../../../src/components/SelectBar/SelectBar.vue"],"sourcesContent":["<template>\n    <div class=\"select-bar\">\n        <div v-for=\"option of sortedOptions\" :key=\"option.value\">\n            <input :value=\"option\" type=\"radio\" :name=\"name\" :id=\"option.value.toString()\" v-model=\"selectedOption\">\n            <label :for=\"option.value.toString()\" class=\"nq-label\" :class=\"getColor(option)\">{{ option.text }}</label>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, ref, watch } from 'vue';\n\nexport interface SelectBarOption {\n    color: string;\n    value: number;\n    text: string;\n    index: number;\n}\n\nexport enum SelectBarEvent {\n    CHANGED = 'changed',\n}\n\nexport default defineComponent({\n    name: 'SelectBar',\n    emits: Object.values(SelectBarEvent),\n    props: {\n        name: {\n            type: String,\n            required: true,\n        },\n        options: {\n            type: Array as PropType<SelectBarOption[]>,\n            required: true,\n        },\n        selectedValue: Number,\n    },\n    setup(props, context) {\n        const value = computed(() => selectedOption.value?.value);\n        const sortedOptions = computed(() => props.options.sort((a, b) => a.index - b.index));\n\n        const selectedOption = ref(props.selectedValue\n                ? sortedOptions.value.find((val) => val.value === props.selectedValue)!\n                : sortedOptions.value[0]);\n\n        function getColor(option: SelectBarOption) {\n            if (option.index <= selectedOption.value!.index) {\n                return selectedOption.value!.color;\n            } else return 'nq-highlight-bg';\n        }\n\n        watch(selectedOption, onChanged);\n        function onChanged(option: SelectBarOption) {\n            context.emit(SelectBarEvent.CHANGED, option.value);\n        }\n\n        context.expose({ value });\n\n        return {\n            sortedOptions,\n            selectedOption,\n\n            getColor,\n        };\n    },\n})\n</script>\n\n<style scoped>\n    .select-bar {\n        display: flex;\n        border-radius: 3.75rem;\n        overflow: hidden;\n        width: 100%;\n    }\n\n    .select-bar > div {\n        display: flex;\n        flex-grow: 1;\n        flex-basis: 0;\n    }\n\n    .select-bar > div + div {\n        margin-left: .25rem;\n    }\n\n    input {\n        display: none;\n    }\n\n    label {\n        padding: 1.75rem 2rem;\n        margin: 0;\n        width: 100%;\n        text-align: center;\n        cursor: pointer;\n        border-radius: .5rem;\n    }\n\n    .nq-highlight-bg {\n        background: var(--nimiq-highlight-bg);\n    }\n</style>\n"],"names":["SelectBarEvent","_sfc_main","defineComponent","props","context","value","computed","_a","selectedOption","sortedOptions","a","b","ref","val","getColor","option","watch","onChanged"],"mappings":";AAmBY,IAAAA,sBAAAA,OACRA,EAAA,UAAU,WADFA,IAAAA,KAAA,CAAA,CAAA;AAIZ,MAAAC,IAAeC,EAAgB;AAAA,EAC3B,MAAM;AAAA,EACN,OAAO,OAAO,OAAOF,CAAc;AAAA,EACnC,OAAO;AAAA,IACH,MAAM;AAAA,MACF,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,SAAS;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,eAAe;AAAA,EACnB;AAAA,EACA,MAAMG,GAAOC,GAAS;AAClB,UAAMC,IAAQC,EAAS,MAAA;;AAAM,cAAAC,IAAAC,EAAe,UAAf,gBAAAD,EAAsB;AAAA,KAAK,GAClDE,IAAgBH,EAAS,MAAMH,EAAM,QAAQ,KAAK,CAACO,GAAGC,MAAMD,EAAE,QAAQC,EAAE,KAAK,CAAC,GAE9EH,IAAiBI,EAAIT,EAAM,gBACvBM,EAAc,MAAM,KAAK,CAACI,MAAQA,EAAI,UAAUV,EAAM,aAAa,IACnEM,EAAc,MAAM,EAAE;AAEhC,aAASK,EAASC,GAAyB;AACvC,aAAIA,EAAO,SAASP,EAAe,MAAO,QAC/BA,EAAe,MAAO,QACnB;AAAA,IAClB;AAEA,IAAAQ,EAAMR,GAAgBS,CAAS;AAC/B,aAASA,EAAUF,GAAyB;AAChC,MAAAX,EAAA,KAAK,WAAwBW,EAAO,KAAK;AAAA,IACrD;AAEQ,WAAAX,EAAA,OAAO,EAAE,OAAAC,EAAA,CAAO,GAEjB;AAAA,MACH,eAAAI;AAAA,MACA,gBAAAD;AAAA,MAEA,UAAAM;AAAA,IAAA;AAAA,EAER;AACJ,CAAC;"}