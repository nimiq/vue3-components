{"version":3,"file":"vue3-components.js","sources":["../../../../node_modules/input-format/modules/templateFormatter.js"],"sourcesContent":["import { count_occurences } from './helpers';\nimport close_braces from './closeBraces'; // Takes a `template` where character placeholders\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\n//\n// Returns a function which takes `value` characters\n// and returns the `template` filled with those characters.\n// If the `template` can only be partially filled\n// then it is cut off.\n//\n// If `should_close_braces` is `true`,\n// then it will also make sure all dangling braces are closed,\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\n//\n\nexport default function (template) {\n  var placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n  var should_close_braces = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!template) {\n    return function (value) {\n      return {\n        text: value\n      };\n    };\n  }\n\n  var characters_in_template = count_occurences(placeholder, template);\n  return function (value) {\n    if (!value) {\n      return {\n        text: '',\n        template: template\n      };\n    }\n\n    var value_character_index = 0;\n    var filled_in_template = ''; // Using `.split('')` here instead of normal `for ... of`\n    // because the importing application doesn't neccessarily include an ES6 polyfill.\n    // The `.split('')` approach discards \"exotic\" UTF-8 characters\n    // (the ones consisting of four bytes)\n    // but template placeholder characters don't fall into that range\n    // and appending UTF-8 characters to a string in parts still works.\n\n    for (var _iterator = template.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var character = _ref;\n\n      if (character !== placeholder) {\n        filled_in_template += character;\n        continue;\n      }\n\n      filled_in_template += value[value_character_index];\n      value_character_index++; // If the last available value character has been filled in,\n      // then return the filled in template\n      // (either trim the right part or retain it,\n      //  if no more character placeholders in there)\n\n      if (value_character_index === value.length) {\n        // If there are more character placeholders\n        // in the right part of the template\n        // then simply trim it.\n        if (value.length < characters_in_template) {\n          break;\n        }\n      }\n    }\n\n    if (should_close_braces) {\n      filled_in_template = close_braces(filled_in_template, template);\n    }\n\n    return {\n      text: filled_in_template,\n      template: template\n    };\n  };\n}\n//# sourceMappingURL=templateFormatter.js.map"],"names":["template_formatter","template","placeholder","should_close_braces","value","characters_in_template","count_occurences","value_character_index","filled_in_template","_iterator","_isArray","_i","_ref","character","close_braces"],"mappings":";;AAce,SAAQA,EAAEC,GAAU;AACjC,MAAIC,IAAc,UAAU,SAAS,KAAK,UAAU,OAAO,SAAY,UAAU,KAAK,KAClFC,IAAsB,UAAU,SAAS,IAAI,UAAU,KAAK;AAEhE,MAAI,CAACF;AACH,WAAO,SAAUG,GAAO;AACtB,aAAO;AAAA,QACL,MAAMA;AAAA,MACd;AAAA,IACA;AAGE,MAAIC,IAAyBC,EAAiBJ,GAAaD,CAAQ;AACnE,SAAO,SAAUG,GAAO;AACtB,QAAI,CAACA;AACH,aAAO;AAAA,QACL,MAAM;AAAA,QACN,UAAUH;AAAA,MAClB;AAWI,aARIM,IAAwB,GACxBC,IAAqB,IAOhBC,IAAYR,EAAS,MAAM,EAAE,GAAGS,IAAW,MAAM,QAAQD,CAAS,GAAGE,IAAK,GAAGF,IAAYC,IAAWD,IAAYA,EAAU,OAAO,iBAAe;AACvJ,UAAIG;AAEJ,UAAIF,GAAU;AACZ,YAAIC,KAAMF,EAAU;AAAQ;AAC5B,QAAAG,IAAOH,EAAUE;AAAA,MACzB,OAAa;AAEL,YADAA,IAAKF,EAAU,QACXE,EAAG;AAAM;AACb,QAAAC,IAAOD,EAAG;AAAA,MACX;AAED,UAAIE,IAAYD;AAEhB,UAAIC,MAAcX,GAAa;AAC7B,QAAAM,KAAsBK;AACtB;AAAA,MACD;AAQD,UANAL,KAAsBJ,EAAMG,IAC5BA,KAKIA,MAA0BH,EAAM,UAI9BA,EAAM,SAASC;AACjB;AAAA,IAGL;AAED,WAAIF,MACFK,IAAqBM,EAAaN,GAAoBP,CAAQ,IAGzD;AAAA,MACL,MAAMO;AAAA,MACN,UAAUP;AAAA,IAChB;AAAA,EACA;AACA;"}