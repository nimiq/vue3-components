{"version":3,"file":"vue3-components8.js","sources":["../../../../node_modules/input-format/modules/dom.js"],"sourcesContent":["export function isReadOnly(element) {\n  return element.hasAttribute('readonly');\n} // Gets <input/> selection bounds\n\nexport function getSelection(element) {\n  // If no selection, return nothing\n  if (element.selectionStart === element.selectionEnd) {\n    return;\n  }\n\n  return {\n    start: element.selectionStart,\n    end: element.selectionEnd\n  };\n} // Key codes\n\nexport var Keys = {\n  Backspace: 8,\n  Delete: 46\n}; // Finds out the operation to be intercepted and performed\n// based on the key down event `keyCode`.\n\nexport function getOperation(event) {\n  switch (event.keyCode) {\n    case Keys.Backspace:\n      return 'Backspace';\n\n    case Keys.Delete:\n      return 'Delete';\n  }\n} // Gets <input/> caret position\n\nexport function getCaretPosition(element) {\n  return element.selectionStart;\n} // Sets <input/> caret position\n\nexport function setCaretPosition(element, caret_position) {\n  // Sanity check\n  if (caret_position === undefined) {\n    return;\n  } // Set caret position.\n  // There has been an issue with caret positioning on Android devices.\n  // https://github.com/catamphetamine/input-format/issues/2\n  // I was revisiting this issue and looked for similar issues in other libraries.\n  // For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n  // They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n  // The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n  // https://github.com/text-mask/text-mask/issues/300\n  // They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n  // https://github.com/text-mask/text-mask/pull/400/files\n  // I've implemented the same workaround here.\n\n\n  if (isAndroid()) {\n    setTimeout(function () {\n      return element.setSelectionRange(caret_position, caret_position);\n    }, 0);\n  } else {\n    element.setSelectionRange(caret_position, caret_position);\n  }\n}\n\nfunction isAndroid() {\n  // `navigator` is not defined when running mocha tests.\n  if (typeof navigator !== 'undefined') {\n    return ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n  }\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;\n//# sourceMappingURL=dom.js.map"],"names":["isReadOnly","element","getSelection","Keys","getOperation","event","getCaretPosition","setCaretPosition","caret_position","isAndroid","ANDROID_USER_AGENT_REG_EXP"],"mappings":"AAAO,SAASA,EAAWC,GAAS;AAClC,SAAOA,EAAQ,aAAa,UAAU;AACxC;AAEO,SAASC,EAAaD,GAAS;AAEpC,MAAIA,EAAQ,mBAAmBA,EAAQ;AAIvC,WAAO;AAAA,MACL,OAAOA,EAAQ;AAAA,MACf,KAAKA,EAAQ;AAAA,IACjB;AACA;AAEU,IAACE,IAAO;AAAA,EAChB,WAAW;AAAA,EACX,QAAQ;AACV;AAGO,SAASC,EAAaC,GAAO;AAClC,UAAQA,EAAM,SAAO;AAAA,IACnB,KAAKF,EAAK;AACR,aAAO;AAAA,IAET,KAAKA,EAAK;AACR,aAAO;AAAA,EACV;AACH;AAEO,SAASG,EAAiBL,GAAS;AACxC,SAAOA,EAAQ;AACjB;AAEO,SAASM,EAAiBN,GAASO,GAAgB;AAExD,EAAIA,MAAmB,WAenBC,EAAS,IACX,WAAW,WAAY;AACrB,WAAOR,EAAQ,kBAAkBO,GAAgBA,CAAc;AAAA,EAChE,GAAE,CAAC,IAEJP,EAAQ,kBAAkBO,GAAgBA,CAAc;AAE5D;AAEA,SAASC,IAAY;AAEnB,MAAI,OAAO,YAAc;AACvB,WAAOC,EAA2B,KAAK,UAAU,SAAS;AAE9D;AAEA,IAAIA,IAA6B;"}