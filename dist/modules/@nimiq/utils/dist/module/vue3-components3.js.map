{"version":3,"file":"vue3-components3.js","sources":["../../../../../../node_modules/@nimiq/utils/dist/module/Cookie-a9f03a9a.js"],"sourcesContent":["/**\n * Get a Cookie\n * @param {string} cookieName - The name / key of the Cookie to get.\n * @returns {string|null} Returns the value of the Cookie, if this one was found. Otherwise return null.\n */\nfunction getCookie(cookieName) {\n    const match = document.cookie.match(new RegExp(`(^| )${encodeURIComponent(cookieName)}=([^;]+)`));\n    return match && decodeURIComponent(match[2]);\n}\n/**\n * Set a Cookie\n * @param {string} cookieName - Name of the Cookie to set.\n * @param {string} cookieValue - Value of the Cookie to set.\n * @param {Object} [options] - The differents options you can set on a cookie.\n * @param {string} [options.path] - The path of the Cookie.\n * If not specified, defaults to the current path of the current document location\n * @param {string} [options.domain] - The domain the Cookie will be available on.\n * If not specified, this defaults to the host portion of the current document location.\n * @param {number} [options.maxAge] - The max age of the Cookie in seconds\n * @param {number} [options.expires] - The expiration date of the Cookie, in GMTString format.\n * See Date.toUTCString() for help formatting this value.\n * @param {boolean} [options.secure] - This specify if the Cookie is only to be transmitted over secure protocols.\n * @param {'lax'|'strict'|'none'} [options.samesite] - This prevents the browser from sending this Cookie along with\n * cross-site requests.\n * @returns {string} Returns the just created Cookie with his options\n */\nfunction setCookie(cookieName, cookieValue, options) {\n    if (typeof cookieName !== 'string')\n        throw new Error('cookieName must be a string');\n    if (typeof cookieValue !== 'string')\n        throw new Error('cookieValue must be a string');\n    const cookie = [`${encodeURIComponent(cookieName)}=${encodeURIComponent(cookieValue)}`];\n    if (options) {\n        if (typeof options !== 'object')\n            throw new Error('options must be an object');\n        if (options.path && typeof options.path !== 'string') {\n            throw new Error('options.path must be a string');\n        }\n        if (options.domain && typeof options.domain !== 'string') {\n            throw new Error('options.domain must be a string');\n        }\n        if (options.maxAge && typeof options.maxAge !== 'number') {\n            throw new Error('options.maxAge must be a number');\n        }\n        if (options.expires && typeof options.expires !== 'string') {\n            throw new Error('options.expires must be a string');\n        }\n        if (options.samesite && !['lax', 'strict', 'none'].includes(options.samesite)) {\n            throw new Error('options.samesite must be either \"lax\", \"strict\" or \"none\"');\n        }\n        if (options.path)\n            cookie.push(`path=${options.path}`);\n        if (options.secure)\n            cookie.push('secure');\n        if (options.domain)\n            cookie.push(`domain=${options.domain}`);\n        if (options.maxAge)\n            cookie.push(`max-age=${options.maxAge}`);\n        if (options.expires)\n            cookie.push(`expires=${options.expires}`);\n        if (options.samesite)\n            cookie.push(`samesite=${options.samesite}`);\n    }\n    const cookieString = cookie.join(';');\n    document.cookie = cookieString;\n    return cookieString;\n}\n/**\n * Unset a Cookie (remove it)\n * @param {string} cookieName - the Name / Key of the Cookie to be unset / removed\n */\nfunction unsetCookie(cookieName) {\n    document.cookie = `${encodeURIComponent(cookieName)}=;max-age=0`;\n}\n\nvar Cookie = /*#__PURE__*/Object.freeze({\n    getCookie: getCookie,\n    setCookie: setCookie,\n    unsetCookie: unsetCookie\n});\n\nexport { getCookie as a, setCookie as b, unsetCookie as c, Cookie as d };\n//# sourceMappingURL=Cookie-a9f03a9a.js.map\n"],"names":["getCookie","cookieName","match","setCookie","cookieValue","options","cookie","cookieString","unsetCookie","Cookie"],"mappings":"AAKA,SAASA,EAAUC,GAAY;AAC3B,QAAMC,IAAQ,SAAS,OAAO,MAAM,IAAI,OAAO,QAAQ,mBAAmBD,CAAU,WAAW,CAAC;AAChG,SAAOC,KAAS,mBAAmBA,EAAM,EAAE;AAC/C;AAkBA,SAASC,EAAUF,GAAYG,GAAaC,GAAS;AACjD,MAAI,OAAOJ,KAAe;AACtB,UAAM,IAAI,MAAM,6BAA6B;AACjD,MAAI,OAAOG,KAAgB;AACvB,UAAM,IAAI,MAAM,8BAA8B;AAClD,QAAME,IAAS,CAAC,GAAG,mBAAmBL,CAAU,KAAK,mBAAmBG,CAAW,GAAG;AACtF,MAAIC,GAAS;AACT,QAAI,OAAOA,KAAY;AACnB,YAAM,IAAI,MAAM,2BAA2B;AAC/C,QAAIA,EAAQ,QAAQ,OAAOA,EAAQ,QAAS;AACxC,YAAM,IAAI,MAAM,+BAA+B;AAEnD,QAAIA,EAAQ,UAAU,OAAOA,EAAQ,UAAW;AAC5C,YAAM,IAAI,MAAM,iCAAiC;AAErD,QAAIA,EAAQ,UAAU,OAAOA,EAAQ,UAAW;AAC5C,YAAM,IAAI,MAAM,iCAAiC;AAErD,QAAIA,EAAQ,WAAW,OAAOA,EAAQ,WAAY;AAC9C,YAAM,IAAI,MAAM,kCAAkC;AAEtD,QAAIA,EAAQ,YAAY,CAAC,CAAC,OAAO,UAAU,MAAM,EAAE,SAASA,EAAQ,QAAQ;AACxE,YAAM,IAAI,MAAM,2DAA2D;AAE/E,IAAIA,EAAQ,QACRC,EAAO,KAAK,QAAQD,EAAQ,MAAM,GAClCA,EAAQ,UACRC,EAAO,KAAK,QAAQ,GACpBD,EAAQ,UACRC,EAAO,KAAK,UAAUD,EAAQ,QAAQ,GACtCA,EAAQ,UACRC,EAAO,KAAK,WAAWD,EAAQ,QAAQ,GACvCA,EAAQ,WACRC,EAAO,KAAK,WAAWD,EAAQ,SAAS,GACxCA,EAAQ,YACRC,EAAO,KAAK,YAAYD,EAAQ,UAAU;AAAA,EACjD;AACD,QAAME,IAAeD,EAAO,KAAK,GAAG;AACpC,kBAAS,SAASC,GACXA;AACX;AAKA,SAASC,EAAYP,GAAY;AAC7B,WAAS,SAAS,GAAG,mBAAmBA,CAAU;AACtD;AAEG,IAACQ,IAAsB,uBAAO,OAAO;AAAA,EACpC,WAAWT;AAAA,EACX,WAAWG;AAAA,EACX,aAAaK;AACjB,CAAC;"}