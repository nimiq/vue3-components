{"version":3,"file":"vue3-components.js","sources":["../../../../../../node_modules/@nimiq/utils/dist/module/BrowserDetection.js"],"sourcesContent":["class BrowserDetection {\n    static getBrowserInfo() {\n        return {\n            browser: BrowserDetection.detectBrowser(),\n            version: BrowserDetection.detectVersion(),\n            isMobile: BrowserDetection.isMobile(),\n        };\n    }\n    /* eslint-disable max-len */\n    // Also includes tablets.\n    // Inspired by:\n    // - https://stackoverflow.com/a/13819253\n    // - https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#Mobile_Tablet_or_Desktop\n    // - http://detectmobilebrowsers.com/about (tablets)\n    /* eslint-enable max-len */\n    static isMobile() {\n        return /i?Phone|iP(ad|od)|Android|BlackBerry|Opera Mini|WPDesktop|Mobi(le)?|Silk/i.test(navigator.userAgent);\n    }\n    /* eslint-disable max-len */\n    // Browser tests inspired by:\n    // - https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#Browser_Name\n    // - https://stackoverflow.com/a/26358856 (order is important)\n    // Note that also this approach is very interesting: https://stackoverflow.com/a/40246491\n    //\n    // The following page is a great overview of example user agent strings:\n    // http://www.useragentstring.com/pages/useragentstring.php?name=All\n    // Example user agents:\n    // - Edge: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14931\n    // - Opera: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.73 Safari/537.36 OPR/34.0.2036.42\n    // - Firefox: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:64.0) Gecko/20100101 Firefox/64.0\n    // - Chrome: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36\n    // - Safari: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A\n    // - Safari iPhone: Mozilla/5.0 (iPhone; CPU iPhone OS 11_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.0 Mobile/15E148 Safari/604.1\n    // - Safari iPad: Mozilla/5.0 (iPad; CPU OS 11_2_2 like Mac OS X) AppleWebKit/604.4.7 (KHTML, like Gecko) Version/11.0 Mobile/15C202 Safari/604.1\n    // - Brave: is indistinguishable from Chrome user agents\n    /* eslint-enable max-len */\n    static detectBrowser() {\n        if (BrowserDetection._detectedBrowser) {\n            return BrowserDetection._detectedBrowser;\n        }\n        // note that the order is important as many browsers include the names of others in the ua.\n        const ua = navigator.userAgent;\n        if (/Edge\\//i.test(ua)) {\n            BrowserDetection._detectedBrowser = BrowserDetection.Browser.EDGE;\n        }\n        else if (/(Opera|OPR)\\//i.test(ua)) {\n            BrowserDetection._detectedBrowser = BrowserDetection.Browser.OPERA;\n        }\n        else if (/Firefox\\//i.test(ua)) {\n            BrowserDetection._detectedBrowser = BrowserDetection.Browser.FIREFOX;\n        }\n        else if (/Chrome\\//i.test(ua)) {\n            // Note that Brave is indistinguishable from Chrome by user agent. The additional check is taken from\n            // https://stackoverflow.com/a/53799770. Unfortunately this distinction is not possible on mobile.\n            BrowserDetection._detectedBrowser = (navigator.plugins.length === 0\n                && navigator.mimeTypes.length === 0\n                && !BrowserDetection.isMobile())\n                ? BrowserDetection.Browser.BRAVE\n                : BrowserDetection.Browser.CHROME;\n        }\n        else if (/^((?!chrome|android).)*safari/i.test(ua)) {\n            // see https://stackoverflow.com/a/23522755\n            // Note that Chrome iOS is also detected as Safari, see comments in stack overflow\n            BrowserDetection._detectedBrowser = BrowserDetection.Browser.SAFARI;\n        }\n        else {\n            BrowserDetection._detectedBrowser = BrowserDetection.Browser.UNKNOWN;\n        }\n        return BrowserDetection._detectedBrowser;\n    }\n    static detectVersion() {\n        if (typeof BrowserDetection._detectedVersion !== 'undefined') {\n            return BrowserDetection._detectedVersion;\n        }\n        let regex;\n        switch (BrowserDetection.detectBrowser()) {\n            case BrowserDetection.Browser.EDGE:\n                regex = /Edge\\/(\\S+)/i;\n                break;\n            case BrowserDetection.Browser.OPERA:\n                regex = /(Opera|OPR)\\/(\\S+)/i;\n                break;\n            case BrowserDetection.Browser.FIREFOX:\n                regex = /Firefox\\/(\\S+)/i;\n                break;\n            case BrowserDetection.Browser.CHROME:\n                regex = /Chrome\\/(\\S+)/i;\n                break;\n            case BrowserDetection.Browser.SAFARI:\n                regex = /(iP(hone|ad|od).*?OS |Version\\/)(\\S+)/i;\n                break;\n            case BrowserDetection.Browser.BRAVE: // can't tell version for Brave\n            default:\n                BrowserDetection._detectedVersion = null;\n                return null;\n        }\n        const match = navigator.userAgent.match(regex);\n        if (!match) {\n            BrowserDetection._detectedVersion = null;\n            return null;\n        }\n        const versionString = match[match.length - 1].replace(/_/g, '.'); // replace _ in iOS version\n        const versionParts = versionString.split('.');\n        const parsedVersionParts = [];\n        for (let i = 0; i < 4; ++i) {\n            parsedVersionParts.push(parseInt(versionParts[i], 10) || 0);\n        }\n        const [major, minor, build, patch] = parsedVersionParts;\n        BrowserDetection._detectedVersion = { versionString, major, minor, build, patch };\n        return BrowserDetection._detectedVersion;\n    }\n    static isChrome() {\n        return BrowserDetection.detectBrowser() === BrowserDetection.Browser.CHROME;\n    }\n    static isFirefox() {\n        return BrowserDetection.detectBrowser() === BrowserDetection.Browser.FIREFOX;\n    }\n    static isOpera() {\n        return BrowserDetection.detectBrowser() === BrowserDetection.Browser.OPERA;\n    }\n    static isEdge() {\n        return BrowserDetection.detectBrowser() === BrowserDetection.Browser.EDGE;\n    }\n    static isSafari() {\n        return BrowserDetection.detectBrowser() === BrowserDetection.Browser.SAFARI;\n    }\n    static isBrave() {\n        return BrowserDetection.detectBrowser() === BrowserDetection.Browser.BRAVE;\n    }\n    static isIOS() {\n        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n    }\n    static isBadIOS() {\n        const browserInfo = BrowserDetection.getBrowserInfo();\n        // Check for iOS < 11 or 11.2 which has the WASM bug\n        return browserInfo.browser === BrowserDetection.Browser.SAFARI\n            && browserInfo.isMobile\n            && browserInfo.version\n            // eslint-disable-next-line no-mixed-operators\n            && (browserInfo.version.major < 11 || browserInfo.version.major === 11 && browserInfo.version.minor === 2);\n    }\n    /**\n     * Detect if the browser is running in Private Browsing mode\n     *\n     * @returns {Promise}\n     */\n    static isPrivateMode() {\n        return new Promise((resolve) => {\n            const on = () => resolve(true); // is in private mode\n            const off = () => resolve(false); // not private mode\n            // using browser detection by feature detection here, also see https://stackoverflow.com/a/9851769\n            // These seem to be partly outdated though. Might want to consider using user agent based detection.\n            const isSafari = () => /Constructor/.test(window.HTMLElement)\n                || (window.safari\n                    && window.safari.pushNotification\n                    && window.safari.pushNotification.toString() === '[object SafariRemoteNotification]');\n            // Chrome & Opera\n            if (window.webkitRequestFileSystem) {\n                window.webkitRequestFileSystem(0, 0, off, on);\n                return;\n            }\n            // Firefox\n            if (document.documentElement && 'MozAppearance' in document.documentElement.style) {\n                // @ts-ignore\n                const db = indexedDB.open(null);\n                db.onerror = on;\n                db.onsuccess = off;\n                return;\n            }\n            // Safari\n            if (isSafari()) {\n                try {\n                    window.openDatabase(null, null, null, null);\n                }\n                catch (_) {\n                    on();\n                    return;\n                }\n            }\n            // IE10+ & Edge\n            if (!window.indexedDB && (window.PointerEvent || window.MSPointerEvent)) {\n                on();\n                return;\n            }\n            // others\n            off();\n        });\n    }\n}\n(function (BrowserDetection) {\n    let Browser;\n    (function (Browser) {\n        Browser[\"CHROME\"] = \"chrome\";\n        Browser[\"FIREFOX\"] = \"firefox\";\n        Browser[\"OPERA\"] = \"opera\";\n        Browser[\"EDGE\"] = \"edge\";\n        Browser[\"SAFARI\"] = \"safari\";\n        Browser[\"BRAVE\"] = \"brave\";\n        Browser[\"UNKNOWN\"] = \"unknown\";\n    })(Browser = BrowserDetection.Browser || (BrowserDetection.Browser = {}));\n})(BrowserDetection || (BrowserDetection = {}));\nvar BrowserDetection$1 = BrowserDetection;\n\nexport default BrowserDetection$1;\n//# sourceMappingURL=BrowserDetection.js.map\n"],"names":["BrowserDetection","ua","regex","match","versionString","versionParts","parsedVersionParts","i","major","minor","build","patch","browserInfo","resolve","on","off","isSafari","db","Browser","BrowserDetection$1","BrowserDetection$2"],"mappings":"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"}