{"version":3,"file":"vue3-components.js","sources":["../../../../../../node_modules/@nimiq/utils/dist/module/ValidationUtils.js"],"sourcesContent":["class ValidationUtils {\n    static isValidAddress(address) {\n        if (!address)\n            return false;\n        try {\n            this.isUserFriendlyAddress(address);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    // Copied from: https://github.com/nimiq-network/core/blob/master/src/main/generic/consensus/base/account/Address.js\n    static isUserFriendlyAddress(str) {\n        if (!str)\n            return;\n        str = str.replace(/ /g, '');\n        if (str.substr(0, 2).toUpperCase() !== 'NQ') {\n            throw new Error('Addresses start with NQ');\n        }\n        if (str.length !== 36) {\n            throw new Error('Addresses are 36 chars (ignoring spaces)');\n        }\n        if (!this._alphabetCheck(str)) {\n            throw new Error('Address has invalid characters');\n        }\n        if (this._ibanCheck(str.substr(4) + str.substr(0, 4)) !== 1) {\n            throw new Error('Address Checksum invalid');\n        }\n    }\n    static _alphabetCheck(str) {\n        str = str.toUpperCase();\n        for (let i = 0; i < str.length; i++) {\n            if (!ValidationUtils.NIMIQ_ALPHABET.includes(str[i]))\n                return false;\n        }\n        return true;\n    }\n    static _ibanCheck(str) {\n        const num = str.split('').map((c) => {\n            const code = c.toUpperCase().charCodeAt(0);\n            return code >= 48 && code <= 57 ? c : (code - 55).toString();\n        }).join('');\n        let tmp = '';\n        for (let i = 0; i < Math.ceil(num.length / 6); i++) {\n            tmp = (parseInt(tmp + num.substr(i * 6, 6), 10) % 97).toString();\n        }\n        return parseInt(tmp, 10);\n    }\n    static isValidHash(hash) {\n        // not using Nimiq Api here to don't require it to be loaded already\n        try {\n            return atob(hash).length === 32;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static get NIMIQ_ALPHABET() {\n        // From Nimiq.BufferUtils.BASE32_ALPHABET.NIMIQ\n        return '0123456789ABCDEFGHJKLMNPQRSTUVXY';\n    }\n}\n\nexport { ValidationUtils };\n//# sourceMappingURL=ValidationUtils.js.map\n"],"names":["ValidationUtils","address","str","i","num","c","code","tmp","hash"],"mappings":"AAAA,MAAMA,EAAgB;AAAA,EAClB,OAAO,eAAeC,GAAS;AAC3B,QAAI,CAACA;AACD,aAAO;AACX,QAAI;AACA,kBAAK,sBAAsBA,CAAO,GAC3B;AAAA,IACV,QACD;AACI,aAAO;AAAA,IACV;AAAA,EACJ;AAAA,EAED,OAAO,sBAAsBC,GAAK;AAC9B,QAAI,EAACA,GAGL;AAAA,UADAA,IAAMA,EAAI,QAAQ,MAAM,EAAE,GACtBA,EAAI,OAAO,GAAG,CAAC,EAAE,YAAa,MAAK;AACnC,cAAM,IAAI,MAAM,yBAAyB;AAE7C,UAAIA,EAAI,WAAW;AACf,cAAM,IAAI,MAAM,0CAA0C;AAE9D,UAAI,CAAC,KAAK,eAAeA,CAAG;AACxB,cAAM,IAAI,MAAM,gCAAgC;AAEpD,UAAI,KAAK,WAAWA,EAAI,OAAO,CAAC,IAAIA,EAAI,OAAO,GAAG,CAAC,CAAC,MAAM;AACtD,cAAM,IAAI,MAAM,0BAA0B;AAAA;AAAA,EAEjD;AAAA,EACD,OAAO,eAAeA,GAAK;AACvB,IAAAA,IAAMA,EAAI;AACV,aAASC,IAAI,GAAGA,IAAID,EAAI,QAAQC;AAC5B,UAAI,CAACH,EAAgB,eAAe,SAASE,EAAIC,EAAE;AAC/C,eAAO;AAEf,WAAO;AAAA,EACV;AAAA,EACD,OAAO,WAAWD,GAAK;AACnB,UAAME,IAAMF,EAAI,MAAM,EAAE,EAAE,IAAI,CAACG,MAAM;AACjC,YAAMC,IAAOD,EAAE,YAAa,EAAC,WAAW,CAAC;AACzC,aAAOC,KAAQ,MAAMA,KAAQ,KAAKD,KAAKC,IAAO,IAAI;IAC9D,CAAS,EAAE,KAAK,EAAE;AACV,QAAIC,IAAM;AACV,aAASJ,IAAI,GAAGA,IAAI,KAAK,KAAKC,EAAI,SAAS,CAAC,GAAGD;AAC3C,MAAAI,KAAO,SAASA,IAAMH,EAAI,OAAOD,IAAI,GAAG,CAAC,GAAG,EAAE,IAAI,IAAI,SAAQ;AAElE,WAAO,SAASI,GAAK,EAAE;AAAA,EAC1B;AAAA,EACD,OAAO,YAAYC,GAAM;AAErB,QAAI;AACA,aAAO,KAAKA,CAAI,EAAE,WAAW;AAAA,IAChC,QACD;AACI,aAAO;AAAA,IACV;AAAA,EACJ;AAAA,EACD,WAAW,iBAAiB;AAExB,WAAO;AAAA,EACV;AACL;"}