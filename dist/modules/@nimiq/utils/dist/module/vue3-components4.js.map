{"version":3,"file":"vue3-components4.js","sources":["../../../../../../node_modules/@nimiq/utils/dist/module/CurrencyInfo.js"],"sourcesContent":["class CurrencyInfo {\n    constructor(currencyCode, decimalsOrLocaleOrOptions, name, symbol) {\n        if (!CurrencyInfo.CURRENCY_CODE_REGEX.test(currencyCode)) {\n            throw new Error(`Invalid currency code ${currencyCode}`);\n        }\n        let decimals;\n        let locale;\n        if (typeof decimalsOrLocaleOrOptions === 'number') {\n            decimals = decimalsOrLocaleOrOptions;\n        }\n        else if (typeof decimalsOrLocaleOrOptions === 'string') {\n            locale = decimalsOrLocaleOrOptions;\n        }\n        else if (typeof decimalsOrLocaleOrOptions === 'object') {\n            ({ decimals, name, symbol, locale } = decimalsOrLocaleOrOptions);\n        }\n        this.code = currencyCode.toUpperCase();\n        // Get the country from the currency code which is typically (but not necessarily) the first two letters,\n        // see https://en.wikipedia.org/wiki/ISO_4217#National_currencies.\n        const currencyCountry = this.code.substring(0, 2);\n        const nameLocalesToTry = [\n            ...(locale ? [locale] : []),\n            `${navigator.language.substring(0, 2)}-${currencyCountry}`,\n            navigator.language,\n            'en-US',\n        ];\n        let supportsDisplayNames = 'DisplayNames' in Intl;\n        // also normalizes the locales\n        [this.locale] = supportsDisplayNames\n            // @ts-ignore TODO use proper types once https://github.com/microsoft/TypeScript/pull/44022 is available\n            ? Intl.DisplayNames.supportedLocalesOf(nameLocalesToTry)\n            : Intl.NumberFormat.supportedLocalesOf(nameLocalesToTry);\n        if (supportsDisplayNames && !this.locale) {\n            // DisplayNames does not support any of the tried locales, not even en. This can happen especially if\n            // DisplayNames was polyfilled, e.g. by @formatjs/intl-displaynames, but no data was (lazy)loaded for any\n            // of our locales.\n            supportsDisplayNames = false;\n            [this.locale] = Intl.NumberFormat.supportedLocalesOf(nameLocalesToTry);\n        }\n        const isAutoGenerated = decimals === undefined && name === undefined && symbol === undefined;\n        const cacheKey = `${this.code} ${this.locale}`;\n        const cachedCurrencyInfo = CurrencyInfo.CACHED_AUTO_GENERATED_CURRENCY_INFOS[cacheKey];\n        if (isAutoGenerated && cachedCurrencyInfo) {\n            return cachedCurrencyInfo;\n        }\n        let formattedString;\n        const formatterOptions = {\n            style: 'currency',\n            currency: currencyCode,\n            useGrouping: false,\n            numberingSystem: 'latn',\n        };\n        if (name !== undefined) {\n            this.name = name;\n        }\n        else if (cachedCurrencyInfo) {\n            this.name = cachedCurrencyInfo.name;\n        }\n        else if (supportsDisplayNames) {\n            try {\n                // Use DisplayNames if available as it provides better names.\n                // @ts-ignore TODO use proper types once https://github.com/microsoft/TypeScript/pull/44022 is merged\n                this.name = new Intl.DisplayNames(this.locale, { type: 'currency' }).of(currencyCode);\n            }\n            catch (e) {\n                // Ignore and continue with if block below.\n            }\n        }\n        if (!this.name) {\n            formattedString = CurrencyInfo.failsafeNumberToLocaleString(0, this.locale, { currencyDisplay: 'name', ...formatterOptions });\n            this.name = formattedString\n                // Using regex parsing instead of NumberFormat.formatToParts which has less browser support.\n                ? formattedString.replace(CurrencyInfo.NUMBER_REGEX, '').trim()\n                : this.code;\n        }\n        if (symbol !== undefined) {\n            this.symbol = symbol;\n        }\n        else if (cachedCurrencyInfo) {\n            this.symbol = cachedCurrencyInfo.symbol;\n        }\n        else {\n            const extraSymbol = CurrencyInfo.EXTRA_SYMBOLS[this.code];\n            if (typeof extraSymbol === 'string') {\n                this.symbol = extraSymbol;\n            }\n            else if (Array.isArray(extraSymbol)) {\n                // Use right-to-left currency symbols only if a right-to-left locale was used and explicitly requested.\n                const useRightToLeft = this.locale === locale\n                    && CurrencyInfo.RIGHT_TO_LEFT_DETECTION_REGEX.test(this.name);\n                this.symbol = extraSymbol[useRightToLeft ? 1 : 0];\n            }\n            else {\n                // Unless a locale was specifically requested, use `en-${currencyCountry}` for the symbol detection\n                // instead of this.locale which is based on navigator.language, as the EXTRA_SYMBOLS have been\n                // created based on en.\n                const symbolLocalesToTry = [\n                    ...(locale ? [locale] : []),\n                    `en-${currencyCountry}`,\n                    'en',\n                ];\n                const symbolFormattedString = CurrencyInfo.failsafeNumberToLocaleString(0, symbolLocalesToTry, { currencyDisplay: 'narrowSymbol', ...formatterOptions }) || CurrencyInfo.failsafeNumberToLocaleString(0, symbolLocalesToTry, { currencyDisplay: 'symbol', ...formatterOptions });\n                if (symbolFormattedString) {\n                    formattedString = symbolFormattedString;\n                    this.symbol = formattedString.replace(CurrencyInfo.NUMBER_REGEX, '').trim();\n                }\n                else {\n                    this.symbol = this.code;\n                }\n            }\n        }\n        if (decimals !== undefined) {\n            this.decimals = decimals;\n        }\n        else if (cachedCurrencyInfo) {\n            this.decimals = cachedCurrencyInfo.decimals;\n        }\n        else if (CurrencyInfo.CUSTOM_DECIMAL_LESS_CURRENCIES.has(this.code)) {\n            this.decimals = 0;\n        }\n        else {\n            // As we only need the number, the used locale and currencyDisplay don't matter.\n            formattedString = formattedString || CurrencyInfo.failsafeNumberToLocaleString(0, 'en', { currencyDisplay: 'code', ...formatterOptions });\n            if (formattedString) {\n                const numberMatch = formattedString.match(CurrencyInfo.NUMBER_REGEX);\n                this.decimals = numberMatch ? (numberMatch[1] || '').length : 2;\n            }\n            else {\n                this.decimals = 2;\n            }\n        }\n        if (isAutoGenerated) {\n            CurrencyInfo.CACHED_AUTO_GENERATED_CURRENCY_INFOS[cacheKey] = this;\n        }\n    }\n    static failsafeNumberToLocaleString(value, locales, options) {\n        try {\n            // toLocaleString can fail for example for invalid locales or currency codes or unsupported currencyDisplay\n            // options in older browsers. Older Chrome versions also had a bug, where some option combinations lead to\n            // a \"Internal error. Icu error.\" exception.\n            return value.toLocaleString(locales, options);\n        }\n        catch (e) {\n            return null;\n        }\n    }\n}\n// This is a manually curated list which was created mainly from\n// https://en.wikipedia.org/wiki/List_of_circulating_currencies with help of the following script run\n// on that wikipedia page. Note that we don't just use the ISO 4217 list of currency codes directly, as\n// it includes some additional codes which are not actual fiat currency codes (see\n// https://en.wikipedia.org/wiki/ISO_4217#X_currencies). Also note that there are also already nicely\n// parsable npm packages like https://github.com/bengourley/currency-symbol-map/blob/master/map.js\n// or https://github.com/smirzaei/currency-formatter/blob/master/currencies.json. However, they both\n// seem to be less accurate than the Wikipedia article (see e.g. KGS), missing some currencies (e.g. MRU)\n// and contain some non-fiat currencies like crypto currencies. When unsure about a currency sign, also\n// consult https://en.wikipedia.org/wiki/Currency_symbol#List_of_currency_symbols_currently_in_use.\n//\n// const EXTRA_SYMBOLS = {\n//     as defined below\n// };\n//\n// function parseWikipediaCurrencyList() {\n//     const sectionHeadline = document.querySelector('#List_of_circulating_currencies_by_state_or_territory')\n//         .closest('h2');\n//     const table = ((el) => {\n//         while (el.tagName !== 'TABLE') el = el.nextElementSibling;\n//         return el;\n//     })(sectionHeadline);\n//\n//     const currencySymbols = {};\n//\n//     for (const row of table.querySelectorAll('tbody tr')) {\n//         // count columns from the end because not all rows have the same number of columns as on some rows, the\n//         // first column is omitted if the cell in the first column of a previous row spans multiple rows.\n//         const code = row.children[row.childElementCount - 3].textContent.trim();\n//         if (code.includes('[G]') // an inofficial currency code not registered in ISO 4217\n//             || code.includes('none')\n//         ) continue;\n//         const symbols = row.children[row.childElementCount - 4].textContent.trim()\n//             .replace(/\\[.+]/g, '') // remove comments\n//             .split(/ or |, /);\n//         if (symbols.length === 1 && symbols[0].includes('none')) continue;\n//\n//         var entry = currencySymbols[code] || [];\n//         symbols.forEach((symbol) => {\n//             if (!entry.includes(symbol)) entry.push(symbol);\n//         });\n//         currencySymbols[code] = entry;\n//     }\n//\n//     return currencySymbols;\n// }\n//\n// // simplified from CurrencyInfo and removed checking for navigator.language to remove the dependency of this code\n// // snippet from the tester's browser language.\n// function getBrowserCurrencySymbol(currencyCode) {\n//     const currencyCountry = currencyCode.substring(0, 2);\n//\n//     const [locale] = Intl.NumberFormat.supportedLocalesOf([ // also normalizes the locales\n//         `en-${currencyCountry}`, // English as spoken in currency country\n//         'en-US', // en-US as last resort\n//     ]);\n//     const formatterOptions = {\n//         style: 'currency',\n//         currency: currencyCode,\n//         useGrouping: false,\n//         numberingSystem: 'latn',\n//     };\n//\n//     let formattedString = (0).toLocaleString(\n//         locale,\n//         { currencyDisplay: 'narrowSymbol', ...formatterOptions },\n//     );\n//\n//     return formattedString.replace(/\\d+(?:\\D(\\d+))?/, '').trim();\n// }\n//\n// function isRightToLeft(s){\n//     return /[\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC]/.test(s);\n// };\n//\n// const referenceCurrencySymbols = parseWikipediaCurrencyList();\n// for (const currency of Object.keys(referenceCurrencySymbols).sort()) {\n//     const referenceSymbols = referenceCurrencySymbols[currency];\n//     const extraSymbols = !EXTRA_SYMBOLS[currency]\n//         ? []\n//         : Array.isArray(EXTRA_SYMBOLS[currency])\n//             ? EXTRA_SYMBOLS[currency]\n//             : [EXTRA_SYMBOLS[currency]];\n//     const browserSymbol = getBrowserCurrencySymbol(currency);\n//\n//     if (extraSymbols.length) {\n//         if (referenceSymbols.includes(browserSymbol) && !isRightToLeft(browserSymbol)) {\n//             console.warn(`${currency}: potentially unnecessary definition in EXTRA_SYMBOLS. `\n//                 + `Reference symbols are ${referenceSymbols}; extra symbols are ${extraSymbols}; `\n//                 + `browser symbol is ${browserSymbol}.`);\n//         } else {\n//             console.info(`${currency}: manually defined via EXTRA_SYMBOLS. `\n//                 + `Reference symbols are ${referenceSymbols}; extra symbols are ${extraSymbols}; `\n//                 + `browser symbol is ${browserSymbol}.`);\n//         }\n//\n//         if (!extraSymbols.some((symbol) => referenceSymbols.includes(symbol))) {\n//             console.warn(`${currency}: mismatch between reference symbols and EXTRA_SYMBOLS. `\n//                 + `Reference symbols are ${referenceSymbols}; extra symbols are ${extraSymbols}; `\n//                 + `browser symbol is ${browserSymbol}.`);\n//         }\n//     } else {\n//         if (!referenceSymbols.includes(browserSymbol) && browserSymbol === currency) {\n//             console.warn(`${currency}: missing in EXTRA_SYMBOLS. `\n//                 + `Reference symbols are ${referenceSymbols}; browser symbol is ${browserSymbol}. `\n//                 + `Add as ${currency}: ${referenceSymbols.length > 1\n//                     ? `['${referenceSymbols.join(`', '`)}']`\n//                     : `'${referenceSymbols}'`},`);\n//         } else {\n//             console.info(`${currency}: Saved explicit definition of extra symbol.  `\n//                 + `Reference symbols are ${referenceSymbols}; `\n//                 + `browser symbol is ${browserSymbol}.`);\n//         }\n//\n//         if (isRightToLeft(browserSymbol)) {\n//             console.warn(`${currency}: browser symbol is right to left. `\n//                 + `Reference symbols are ${referenceSymbols}; extra symbols are ${extraSymbols}; `\n//                 + `browser symbol is ${browserSymbol}.`);\n//         }\n//     }\n// }\nCurrencyInfo.EXTRA_SYMBOLS = {\n    AED: ['DH', 'د.إ'],\n    AFN: ['Afs', '؋'],\n    ALL: 'L',\n    ANG: 'ƒ',\n    AWG: 'ƒ',\n    BGN: 'лв.',\n    BHD: ['BD', '.د.ب'],\n    BTN: 'Nu.',\n    BYN: 'Br',\n    CDF: 'Fr',\n    CHF: 'Fr.',\n    CVE: '$',\n    DJF: 'Fr',\n    DZD: ['DA', 'د.ج'],\n    EGP: ['£', 'ج.م'],\n    ETB: 'Br',\n    HTG: 'G',\n    IQD: ['ID', 'ع.د'],\n    IRR: ['RI', '﷼'],\n    JOD: ['JD', 'د.ا'],\n    KES: 'Sh',\n    KGS: '\\u20c0',\n    KWD: ['KD', 'د.ك'],\n    LBP: ['LL', 'ل.ل'],\n    LSL: 'M',\n    LYD: ['LD', 'ل.د'],\n    MAD: ['DH', 'درهم'],\n    MDL: 'L',\n    MKD: 'ден',\n    MMK: 'Ks',\n    MRU: 'UM',\n    MVR: ['Rf', '.ރ'],\n    MZN: 'MT',\n    NPR: 'रु',\n    OMR: ['R.O.', 'ر.ع.'],\n    PAB: 'B/.',\n    PEN: 'S/',\n    PKR: '₨',\n    QAR: ['QR', 'ر.ق'],\n    RSD: 'дин.',\n    SAR: ['SR', '﷼'],\n    SDG: ['£SD', 'ج.س.'],\n    SOS: 'Sh.',\n    TJS: 'SM',\n    TMT: 'm',\n    TND: ['DT', 'د.ت'],\n    UZS: 'сум',\n    VES: 'Bs.',\n    WST: 'T',\n    XPF: '₣',\n    YER: ['RI', '﷼'],\n};\n// Some currencies have been devalued so much by inflation that their sub-units have been removed from circulation\n// or are effectively not being used anymore. This is not for all currencies reflected yet in toLocaleString, such\n// that we mark some currencies manually as decimal-less. This list has been assembled manually from the list of all\n// circulating currencies (https://en.wikipedia.org/wiki/List_of_circulating_currencies) by first reducing it to\n// currencies that still have decimals via the following script, and then looking through their Wikipedia articles.\n//\n// const referenceCurrencySymbols = parseWikipediaCurrencyList(); // as defined above\n// for (const currency of Object.keys(referenceCurrencySymbols).sort()) {\n//     const country = currency.substring(0, 2);\n//     const formatted = (2).toLocaleString([`en-${country}`], {\n//         style: 'currency',\n//         currency: currency,\n//         currencyDisplay: 'narrowSymbol',\n//         numberingSystem: 'latn',\n//     });\n//     const numberMatch = formatted.match(/\\d+(?:\\D(\\d+))?/);\n//     const decimals = numberMatch ? (numberMatch[1] || '').length : 2;\n//     if (!decimals) continue;\n//     console.log(`${currency} - ${decimals}\\n`);\n// }\nCurrencyInfo.CUSTOM_DECIMAL_LESS_CURRENCIES = new Set([\n    'AMD',\n    'AOA',\n    'ARS',\n    'BDT',\n    'BTN',\n    'CDF',\n    'COP',\n    'CRC',\n    'CVE',\n    'CZK',\n    'DOP',\n    'DZD',\n    'GMD',\n    'GYD',\n    'HUF',\n    'IDR',\n    'INR',\n    'JMD',\n    'KES',\n    'KGS',\n    'KHR',\n    'KZT',\n    'LKR',\n    'MAD',\n    'MKD',\n    'MNT',\n    'MOP',\n    'MWK',\n    'MXN',\n    'NGN',\n    'NOK',\n    'NPR',\n    'PHP',\n    'PKR',\n    'RUB',\n    'SEK',\n    'TWD',\n    'TZS',\n    'UAH',\n    'UYU',\n    'UZS',\n    'VES',\n]);\n// Cache auto-generated CurrencyInfos such that they do not need to be recalculated.\nCurrencyInfo.CACHED_AUTO_GENERATED_CURRENCY_INFOS = {};\n// Regex for detecting valid currency codes.\nCurrencyInfo.CURRENCY_CODE_REGEX = /[A-Z]{3}/i;\n// Regex for detecting the number with optional decimals in a formatted string for useGrouping: false\nCurrencyInfo.NUMBER_REGEX = /\\d+(?:\\D(\\d+))?/;\n// Simplified and adapted from https://stackoverflow.com/a/14824756.\n// Note that this rtl detection is incomplete but good enough for our needs.\nCurrencyInfo.RIGHT_TO_LEFT_DETECTION_REGEX = /[\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC]/;\n\nexport { CurrencyInfo };\n//# sourceMappingURL=CurrencyInfo.js.map\n"],"names":["CurrencyInfo","currencyCode","decimalsOrLocaleOrOptions","name","symbol","decimals","locale","currencyCountry","nameLocalesToTry","supportsDisplayNames","isAutoGenerated","cacheKey","cachedCurrencyInfo","formattedString","formatterOptions","extraSymbol","useRightToLeft","symbolLocalesToTry","symbolFormattedString","numberMatch","value","locales","options"],"mappings":"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"}