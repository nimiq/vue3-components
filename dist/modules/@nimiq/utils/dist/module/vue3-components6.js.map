{"version":3,"file":"vue3-components6.js","sources":["../../../../../../node_modules/@nimiq/utils/dist/module/FormattableNumber.js"],"sourcesContent":["// formats and converts numbers without precision loss\nclass FormattableNumber {\n    constructor(value) {\n        if (typeof value !== 'string') {\n            value = value.toString(); // work on strings in any case. Note that this might result in scientific notation\n        }\n        const numberMatch = value.match(FormattableNumber.NUMBER_REGEX);\n        if (!numberMatch)\n            throw new Error(`${value} is not a valid number`);\n        this._sign = numberMatch[1];\n        this._digits = `${numberMatch[2]}${numberMatch[3]}`;\n        if (!this._digits)\n            throw new Error(`${value} is not a valid number`);\n        this._decimalSeparatorPosition = numberMatch[2].length;\n        const exponent = Number.parseInt(numberMatch[5], 10);\n        if (exponent)\n            this.moveDecimalSeparator(exponent); // remove scientific notation\n    }\n    toString(optionsOrUseGrouping) {\n        let { maxDecimals = undefined, minDecimals = undefined, useGrouping = optionsOrUseGrouping === true, groupSeparator = '\\u202F', } = typeof optionsOrUseGrouping === 'object' ? optionsOrUseGrouping : {};\n        if (maxDecimals !== undefined && minDecimals !== undefined) {\n            minDecimals = Math.min(minDecimals, maxDecimals);\n        }\n        if (maxDecimals !== undefined && maxDecimals < this._digits.length - this._decimalSeparatorPosition) {\n            this.round(maxDecimals);\n        }\n        let integers = this._digits.slice(0, this._decimalSeparatorPosition).replace(/^0+/, ''); // trim leading 0s\n        let decimals = this._digits.slice(this._decimalSeparatorPosition).replace(/0+$/, ''); // trim trailing 0s\n        if (minDecimals !== undefined && minDecimals > decimals.length) {\n            decimals = decimals.padEnd(minDecimals, '0');\n        }\n        // Apply grouping for values with more than 4 integer digits.\n        if (useGrouping && groupSeparator && integers.length > 4) {\n            integers = integers.replace(/(\\d)(?=(\\d{3})+$)/g, `$1${groupSeparator}`);\n        }\n        return `${this._sign}${integers || '0'}${decimals ? `.${decimals}` : ''}`;\n    }\n    valueOf() {\n        return this.toString();\n    }\n    moveDecimalSeparator(moveBy) {\n        this._decimalSeparatorPosition += moveBy;\n        if (this._decimalSeparatorPosition > this._digits.length) {\n            this._digits = this._digits.padEnd(this._decimalSeparatorPosition, '0');\n        }\n        else if (this._decimalSeparatorPosition < 0) {\n            this._digits = this._digits.padStart(this._digits.length - this._decimalSeparatorPosition, '0');\n            this._decimalSeparatorPosition = 0;\n        }\n        return this;\n    }\n    round(decimals) {\n        if (this._digits.length - this._decimalSeparatorPosition <= decimals)\n            return this;\n        const firstCutOffIndex = this._decimalSeparatorPosition + decimals;\n        const digitsToKeep = this._digits\n            .substring(0, firstCutOffIndex)\n            .padEnd(this._decimalSeparatorPosition, '0');\n        if (Number.parseInt(this._digits[firstCutOffIndex], 10) < 5) {\n            // rounding down, can just use the trimmed decimals\n            this._digits = digitsToKeep;\n            return this;\n        }\n        // round up\n        const digits = `0${digitsToKeep}`.split(''); // add a leading 0 for easier handling of carry\n        const lastRemainingIndex = firstCutOffIndex; // due to the added leading 0\n        for (let i = lastRemainingIndex; i >= 0; --i) {\n            const newDigit = Number.parseInt(digits[i], 10) + 1;\n            if (newDigit < 10) {\n                digits[i] = newDigit.toString();\n                break; // no carry over, break\n            }\n            else {\n                digits[i] = '0';\n                // continue loop to handle carry over\n            }\n        }\n        this._digits = digits.join('');\n        this._decimalSeparatorPosition += 1; // account for the added leading 0\n        return this;\n    }\n    equals(other) {\n        if (!(other instanceof FormattableNumber)) {\n            try {\n                other = new FormattableNumber(other);\n            }\n            catch (e) {\n                // not convertable to a FormattableNumber\n                return false;\n            }\n        }\n        // compare rendered results to benefit from normalizations done on rendering\n        return this.toString() === other.toString();\n    }\n}\nFormattableNumber.NUMBER_REGEX = /^(-?)(\\d*)\\.?(\\d*)(e(-?\\d+))?$/;\nfunction toNonScientificNumberString(value) {\n    return new FormattableNumber(value).toString();\n}\n\nexport { FormattableNumber, toNonScientificNumberString };\n//# sourceMappingURL=FormattableNumber.js.map\n"],"names":["FormattableNumber","value","numberMatch","exponent","optionsOrUseGrouping","maxDecimals","minDecimals","useGrouping","groupSeparator","integers","decimals","moveBy","firstCutOffIndex","digitsToKeep","digits","lastRemainingIndex","i","newDigit","other"],"mappings":"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"}