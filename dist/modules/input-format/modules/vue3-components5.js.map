{"version":3,"file":"vue3-components5.js","sources":["../../../../node_modules/input-format/modules/helpers.js"],"sourcesContent":["// Counts all occurences of a symbol in a string\nexport function count_occurences(symbol, string) {\n  var count = 0; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes)\n  // but template placeholder characters don't fall into that range\n  // so skipping such miscellaneous \"exotic\" characters\n  // won't matter here for just counting placeholder character occurrences.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n}\n//# sourceMappingURL=helpers.js.map"],"names":["count_occurences","symbol","string","count","_iterator","_isArray","_i","_ref","character"],"mappings":"AACO,SAASA,EAAiBC,GAAQC,GAAQ;AAS/C,WARIC,IAAQ,GAQHC,IAAYF,EAAO,MAAM,EAAE,GAAGG,IAAW,MAAM,QAAQD,CAAS,GAAGE,IAAK,GAAGF,IAAYC,IAAWD,IAAYA,EAAU,OAAO,iBAAe;AACrJ,QAAIG;AAEJ,QAAIF,GAAU;AACZ,UAAIC,KAAMF,EAAU;AAAQ;AAC5B,MAAAG,IAAOH,EAAUE;AAAA,IACvB,OAAW;AAEL,UADAA,IAAKF,EAAU,QACXE,EAAG;AAAM;AACb,MAAAC,IAAOD,EAAG;AAAA,IACX;AAED,QAAIE,IAAYD;AAEhB,IAAIC,MAAcP,KAChBE;AAAA,EAEH;AAED,SAAOA;AACT;"}